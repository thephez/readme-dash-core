{
 "_id": "5db1c87d8f54180067c6ed8e",
 "version": "5daf2e65f4109c0040fd51e5",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "5db1c7f980dc4f02b5e4131a",
 "category": "5db19f199332b800310886f8",
 "__v": 1,
 "updates": [],
 "updatedAt": "2019-11-14T19:09:44.228Z",
 "createdAt": "2019-10-24T15:51:25.177Z",
 "next": {
  "pages": [
   {
    "category": "Core Examples",
    "slug": "core-examples-transaction-tutorial-complex-raw-transaction",
    "name": "Complex Raw Transaction",
    "icon": "file-text-o",
    "type": "doc"
   }
  ],
  "description": ""
 },
 "link_external": false,
 "link_url": "",
 "sync_unique": "",
 "hidden": false,
 "api": {
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "auth": "required",
  "params": [],
  "url": "",
  "method": "get"
 },
 "isReference": false,
 "order": 1,
 "body": "The [raw transaction RPCs](core-api-ref-remote-procedure-calls-raw-transactions) allow users to create custom <<glossary:transactions>> and delay broadcasting those transactions. However, mistakes made in <<glossary:raw transactions>> may not be detected by Dash Core, and a number of raw transaction users have permanently lost large numbers of <<glossary:duffs>>, so please be careful using raw transactions on <<glossary:mainnet>>.\n\nThis subsection covers one of the simplest possible raw transactions.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Note: the following steps pick up where the [Simple Spending Tutorial](core-examples-transaction-tutorial-simple-spending) left off\"\n}\n[/block]\n# 1. List unspent outputs\n\nRe-rerun `listunspent`. We now have three UTXOs: the two transactions we created before plus the <<glossary:coinbase transaction>> from block #2. We save the <<glossary:TXID>> and <<glossary:output index>> number (vout) of that <<glossary:coinbase>> UTXO to shell variables.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dash-cli -regtest listunspent\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n``` json\n[\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 0,\n    \"address\": \"yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\",\n    \"account\": \"\",\n    \"scriptPubKey\": \"76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac\",\n    \"amount\": 10.00000000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 1,\n    \"address\": \"yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ\",\n    \"scriptPubKey\": \"76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac\",\n    \"amount\": 490.00000000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\",\n    \"vout\": 0,\n    \"address\": \"yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\",\n    \"scriptPubKey\": \"21023fff9c9dc9088c0aeba90d75413705091111311d761054de23ac\\\n                      dd217450869aac\",\n    \"amount\": 500.00000000,\n    \"confirmations\": 101,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  }\n]\n```\n\n``` bash\n\n> UTXO_TXID=9036265a8f577421e556cd4f729752d73469953deea759de11ef[...]\n> UTXO_VOUT=0\n```\n\n# 2. Get new address\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dash-cli -regtest getnewaddress\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n``` bash\nyfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\n\n> NEW_ADDRESS=yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\n```\n\n# 3. Create raw transaction\n\nUsing two arguments to the [`createrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transaction#section-createrawtransaction), we create a new raw format transaction. The first argument (a JSON array) references the txid of the coinbase transaction from block #2 and the <<glossary:index>> number (0) of the <<glossary:output>> from that transaction we want to spend. The second argument (a JSON object) creates the output with the address ( <<glossary:public key>> hash) and number of DASH we want to transfer. We save the resulting raw format transaction to a shell variable.\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"**Warning:** `createrawtransaction` does not automatically create change outputs, so you can easily accidentally pay a large transaction fee.\",\n  \"title\": \"Transaction fee warning\"\n}\n[/block]\nIn this example, our input had 500.0000 DASH and our output (`$NEW_ADDRESS`) is being paid 499.9999 DASH, so the transaction will include a fee of 0.0001 DASH. If we had paid `$NEW_ADDRESS` only 100 DASH with no other changes to this transaction, the <<glossary:transaction fee>> would be a whopping 400 DASH. See the [Complex Raw Transaction subsection](/docs/core-examples-transaction-tutorial-complex-raw-transaction) below for how to create a transaction with multiple outputs so you can send the change back to yourself.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"## Outputs - inputs = transaction fee, so always double-check your math!\\ndash-cli -regtest createrawtransaction ''' \\\\\\n    [ \\\\\\n      { \\\\\\n        \\\"txid\\\": \\\"'$UTXO_TXID'\\\", \\\\\\n        \\\"vout\\\": '$UTXO_VOUT' \\\\\\n      } \\\\\\n    ] \\\\\\n    ''' ''' \\\\\\n    { \\\\\\n      \\\"'$NEW_ADDRESS'\\\": 499.9999 \\\\\\n    }'''\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n``` bash\n0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd56e5217457\\\n8f5a2636900000000000ffffffff01f04c3ba40b0000001976a914d240140859\\\n744755d73e5967081c3bedceffc5db88ac00000000\n\n> RAW_TX=0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd5[...]\n```\n\n# 4. Decode raw transaction\n\nUse the [`decoderawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transaction#section-decoderawtransaction) to see exactly what the transaction we just created does.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dash-cli -regtest decoderawtransaction $RAW_TX\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n``` json\n{\n  \"txid\": \"7cbd2245ee5d824c00fc08b3bf2f694ad9a215d38d897fcf2df64a43c59bb97b\",\n  \"size\": 85,\n  \"version\": 1,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"\",\n        \"hex\": \"\"\n      },\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 499.99990000,\n      \"valueSat\": 49999990000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 d240140859744755d73e5967081c3bedceffc5db\\\n                  OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914d240140859744755d73e5967081c3bedceffc5db88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n# 5. Sign transaction\n\nUse the [`signrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transaction#section-signrawtransaction) to sign the transaction created by `createrawtransaction` and save the returned \"hex\" raw format signed transaction to a shell variable.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dash-cli -regtest signrawtransaction $RAW_TX\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n``` json\n{\n  \"hex\": \"0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd\\\n          56e52174578f5a2636900000000049483045022100b4e5e9224afa\\\n          de8686bb22a957d1ec1587a66ee84943761b2d9061d5f751cd7602\\\n          203c88d4064641a413ce3d0824264d6d87908960487afe9a3a133e\\\n          7d67a22fd05101ffffffff01f04c3ba40b0000001976a914d24014\\\n          0859744755d73e5967081c3bedceffc5db88ac00000000\",\n  \"complete\": true\n}\n```\n``` bash\n\n> SIGNED_RAW_TX=0100000001a8364935baa9ef11de59a7ee3d956934d75297[...]\n```\n\nEven though the transaction is now complete, the Dash Core <<glossary:node>> we're connected to doesn't know anything about the transaction, nor does any other part of the <<glossary:network>>. We've created a spend, but we haven't actually spent anything because we could simply unset the `$SIGNED_RAW_TX` variable to eliminate the transaction.\n\n# 6. Send raw transaction\n\nSend the signed transaction to the connected node using the [`sendrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transaction#section-sendrawtransaction). After accepting the transaction, the node would usually then broadcast it to other <<glossary:peers>>, but we're not currently connected to other peers because we started in <<glossary:regression test mode>>.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n``` bash\nfa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d\n```\n\n# 7. Mine a block\n\nGenerate a block to confirm the transaction and then clear our shell variables.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dash-cli -regtest generate 1\\n\\nunset UTXO_TXID UTXO_VOUT NEW_ADDRESS RAW_TX SIGNED_RAW_TX\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]",
 "excerpt": "",
 "slug": "core-examples-transaction-tutorial-simple-raw-transaction",
 "type": "basic",
 "metadata": {
  "description": "",
  "title": "",
  "image": []
 },
 "title": "Simple Raw Transaction",
 "id": "5db1c87d8f54180067c6ed8e",
 "isApi": false,
 "body_html": "<div class=\"magic-block-textarea\"><p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions\">raw transaction RPCs</a> allow users to create custom &lt;&lt;glossary:transactions&gt;&gt; and delay broadcasting those transactions. However, mistakes made in &lt;&lt;glossary:raw transactions&gt;&gt; may not be detected by Dash Core, and a number of raw transaction users have permanently lost large numbers of &lt;&lt;glossary:duffs&gt;&gt;, so please be careful using raw transactions on &lt;&lt;glossary:mainnet&gt;&gt;.</p>\n<p>This subsection covers one of the simplest possible raw transactions.</p>\n\n</div>\n<div class=\"magic-block-callout type-info no-title\"><span class=\"noTitleIcon\"><i title=\"Info\" class=\"fa fa-info-circle\"></i></span>\n\t<div class=\"callout-body\"><p>Note: the following steps pick up where the <a href=\"core-examples-transaction-tutorial-simple-spending\">Simple Spending Tutorial</a> left off</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-1-list-unspent-outputs\"></div>1. List unspent outputs<a class=\"fa fa-anchor\" href=\"#section-1-list-unspent-outputs\"></a></h1>\n<p>Re-rerun <code>listunspent</code>. We now have three UTXOs: the two transactions we created before plus the &lt;&lt;glossary:coinbase transaction&gt;&gt; from block #2. We save the &lt;&lt;glossary:TXID&gt;&gt; and &lt;&lt;glossary:output index&gt;&gt; number (vout) of that &lt;&lt;glossary:coinbase&gt;&gt; UTXO to shell variables.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(664)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-664\">dash-cli -regtest listunspent</textarea>\n\t\t\t<pre id=\"code-664\"><code><span class='cm-s-neo'>dash-cli <span class=\"cm-attribute\">-regtest</span> listunspent</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-json\"><span class='cm-s-neo'>[\n  {\n    <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\"</span>,\n    <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n    <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\"</span>,\n    <span class=\"cm-property\">\"account\"</span>: <span class=\"cm-string\">\"\"</span>,\n    <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac\"</span>,\n    <span class=\"cm-property\">\"amount\"</span>: <span class=\"cm-number\">10.00000000</span>,\n    <span class=\"cm-property\">\"confirmations\"</span>: <span class=\"cm-number\">1</span>,\n    <span class=\"cm-property\">\"ps_rounds\"</span>: <span class=\"cm-operator\">-</span><span class=\"cm-number\">2</span>,\n    <span class=\"cm-property\">\"spendable\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-property\">\"solvable\"</span>: <span class=\"cm-atom\">true</span>\n  },\n  {\n    <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\"</span>,\n    <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">1</span>,\n    <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ\"</span>,\n    <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac\"</span>,\n    <span class=\"cm-property\">\"amount\"</span>: <span class=\"cm-number\">490.00000000</span>,\n    <span class=\"cm-property\">\"confirmations\"</span>: <span class=\"cm-number\">1</span>,\n    <span class=\"cm-property\">\"ps_rounds\"</span>: <span class=\"cm-operator\">-</span><span class=\"cm-number\">2</span>,\n    <span class=\"cm-property\">\"spendable\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-property\">\"solvable\"</span>: <span class=\"cm-atom\">true</span>\n  },\n  {\n    <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\"</span>,\n    <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n    <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\"</span>,\n    <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"21023fff9c9dc9088c0aeba90d75413705091111311d761054de23ac\\</span>\n                      <span class=\"cm-string\">dd217450869aac\"</span>,\n    <span class=\"cm-string\">\"amount\"</span>: <span class=\"cm-number\">500.00000000</span>,\n    <span class=\"cm-string\">\"confirmations\"</span>: <span class=\"cm-number\">101</span>,\n    <span class=\"cm-string\">\"ps_rounds\"</span>: <span class=\"cm-operator\">-</span><span class=\"cm-number\">2</span>,\n    <span class=\"cm-string\">\"spendable\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-string\">\"solvable\"</span>: <span class=\"cm-atom\">true</span>\n  }\n]</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">UTXO_TXID</span><span class=\"cm-operator\">=</span>9036265a8f577421e556cd4f729752d73469953deea759de11ef[...]\n&gt; <span class=\"cm-def\">UTXO_VOUT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">0</span></span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-2-get-new-address\"></div>2. Get new address<a class=\"fa fa-anchor\" href=\"#section-2-get-new-address\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(96)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-96\">dash-cli -regtest getnewaddress</textarea>\n\t\t\t<pre id=\"code-96\"><code><span class='cm-s-neo'>dash-cli <span class=\"cm-attribute\">-regtest</span> getnewaddress</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-bash\"><span class='cm-s-neo'>yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\n\n&gt; <span class=\"cm-def\">NEW_ADDRESS</span><span class=\"cm-operator\">=</span>yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-3-create-raw-transaction\"></div>3. Create raw transaction<a class=\"fa fa-anchor\" href=\"#section-3-create-raw-transaction\"></a></h1>\n<p>Using two arguments to the <a href=\"core-api-ref-remote-procedure-calls-raw-transaction#section-createrawtransaction\"><code>createrawtransaction</code> RPC</a>, we create a new raw format transaction. The first argument (a JSON array) references the txid of the coinbase transaction from block #2 and the &lt;&lt;glossary:index&gt;&gt; number (0) of the &lt;&lt;glossary:output&gt;&gt; from that transaction we want to spend. The second argument (a JSON object) creates the output with the address ( &lt;&lt;glossary:public key&gt;&gt; hash) and number of DASH we want to transfer. We save the resulting raw format transaction to a shell variable.</p>\n\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Transaction fee warning\n\t</h3>\n\t<div class=\"callout-body\"><p><strong>Warning:</strong> <code>createrawtransaction</code> does not automatically create change outputs, so you can easily accidentally pay a large transaction fee.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>In this example, our input had 500.0000 DASH and our output (<code>$NEW_ADDRESS</code>) is being paid 499.9999 DASH, so the transaction will include a fee of 0.0001 DASH. If we had paid <code>$NEW_ADDRESS</code> only 100 DASH with no other changes to this transaction, the &lt;&lt;glossary:transaction fee&gt;&gt; would be a whopping 400 DASH. See the <a href=\"/docs/core-examples-transaction-tutorial-complex-raw-transaction\">Complex Raw Transaction subsection</a> below for how to create a transaction with multiple outputs so you can send the change back to yourself.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(403)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-403\">## Outputs - inputs = transaction fee, so always double-check your math!\ndash-cli -regtest createrawtransaction ''' \\\n    [ \\\n      { \\\n        &quot;txid&quot;: &quot;'$UTXO_TXID'&quot;, \\\n        &quot;vout&quot;: '$UTXO_VOUT' \\\n      } \\\n    ] \\\n    ''' ''' \\\n    { \\\n      &quot;'$NEW_ADDRESS'&quot;: 499.9999 \\\n    }'''</textarea>\n\t\t\t<pre id=\"code-403\"><code><span class='cm-s-neo'><span class=\"cm-comment\">## Outputs - inputs = transaction fee, so always double-check your math!</span>\ndash-cli <span class=\"cm-attribute\">-regtest</span> createrawtransaction <span class=\"cm-string\">''' \\</span>\n<span class=\"cm-string\">    [ \\</span>\n<span class=\"cm-string\">      { \\</span>\n<span class=\"cm-string\">        \"txid\": \"'</span><span class=\"cm-def\">$UTXO_TXID</span><span class=\"cm-string\">'\", \\</span>\n<span class=\"cm-string\">        \"vout\": '</span><span class=\"cm-def\">$UTXO_VOUT</span><span class=\"cm-string\">' \\</span>\n<span class=\"cm-string\">      } \\</span>\n<span class=\"cm-string\">    ] \\</span>\n<span class=\"cm-string\">    '''</span> <span class=\"cm-string\">''' \\</span>\n<span class=\"cm-string\">    { \\</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS</span><span class=\"cm-string\">'\": 499.9999 \\</span>\n<span class=\"cm-string\">    }'''</span></span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-bash\"><span class='cm-s-neo'>0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd56e5217457\\\n8f5a2636900000000000ffffffff01f04c3ba40b0000001976a914d240140859\\\n744755d73e5967081c3bedceffc5db88ac00000000\n\n&gt; <span class=\"cm-def\">RAW_TX</span><span class=\"cm-operator\">=</span>0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd5[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-4-decode-raw-transaction\"></div>4. Decode raw transaction<a class=\"fa fa-anchor\" href=\"#section-4-decode-raw-transaction\"></a></h1>\n<p>Use the <a href=\"core-api-ref-remote-procedure-calls-raw-transaction#section-decoderawtransaction\"><code>decoderawtransaction</code> RPC</a> to see exactly what the transaction we just created does.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(342)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-342\">dash-cli -regtest decoderawtransaction $RAW_TX</textarea>\n\t\t\t<pre id=\"code-342\"><code><span class='cm-s-neo'>dash-cli <span class=\"cm-attribute\">-regtest</span> decoderawtransaction <span class=\"cm-def\">$RAW_TX</span></span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"7cbd2245ee5d824c00fc08b3bf2f694ad9a215d38d897fcf2df64a43c59bb97b\"</span>,\n  <span class=\"cm-property\">\"size\"</span>: <span class=\"cm-number\">85</span>,\n  <span class=\"cm-property\">\"version\"</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-property\">\"locktime\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-property\">\"vin\"</span>: [\n    {\n      <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\"</span>,\n      <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"scriptSig\"</span>: {\n        <span class=\"cm-property\">\"asm\"</span>: <span class=\"cm-string\">\"\"</span>,\n        <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"\"</span>\n      },\n      <span class=\"cm-property\">\"sequence\"</span>: <span class=\"cm-number\">4294967295</span>\n    }\n  ],\n  <span class=\"cm-property\">\"vout\"</span>: [\n    {\n      <span class=\"cm-property\">\"value\"</span>: <span class=\"cm-number\">499.99990000</span>,\n      <span class=\"cm-property\">\"valueSat\"</span>: <span class=\"cm-number\">49999990000</span>,\n      <span class=\"cm-property\">\"n\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"scriptPubKey\"</span>: {\n        <span class=\"cm-property\">\"asm\"</span>: <span class=\"cm-string\">\"OP_DUP OP_HASH160 d240140859744755d73e5967081c3bedceffc5db\\</span>\n                  <span class=\"cm-string\">OP_EQUALVERIFY OP_CHECKSIG\"</span>,\n        <span class=\"cm-string\">\"hex\"</span>: <span class=\"cm-string\">\"76a914d240140859744755d73e5967081c3bedceffc5db88ac\"</span>,\n        <span class=\"cm-string\">\"reqSigs\"</span>: <span class=\"cm-number\">1</span>,\n        <span class=\"cm-string\">\"type\"</span>: <span class=\"cm-string\">\"pubkeyhash\"</span>,\n        <span class=\"cm-string\">\"addresses\"</span>: [\n          <span class=\"cm-string\">\"yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\"</span>\n        ]\n      }\n    }\n  ]\n}</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-5-sign-transaction\"></div>5. Sign transaction<a class=\"fa fa-anchor\" href=\"#section-5-sign-transaction\"></a></h1>\n<p>Use the <a href=\"core-api-ref-remote-procedure-calls-raw-transaction#section-signrawtransaction\"><code>signrawtransaction</code> RPC</a> to sign the transaction created by <code>createrawtransaction</code> and save the returned &quot;hex&quot; raw format signed transaction to a shell variable.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(3)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-3\">dash-cli -regtest signrawtransaction $RAW_TX</textarea>\n\t\t\t<pre id=\"code-3\"><code><span class='cm-s-neo'>dash-cli <span class=\"cm-attribute\">-regtest</span> signrawtransaction <span class=\"cm-def\">$RAW_TX</span></span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd\\</span>\n          <span class=\"cm-string\">56e52174578f5a2636900000000049483045022100b4e5e9224afa\\</span>\n          <span class=\"cm-string\">de8686bb22a957d1ec1587a66ee84943761b2d9061d5f751cd7602\\</span>\n          <span class=\"cm-string\">203c88d4064641a413ce3d0824264d6d87908960487afe9a3a133e\\</span>\n          <span class=\"cm-string\">7d67a22fd05101ffffffff01f04c3ba40b0000001976a914d24014\\</span>\n          <span class=\"cm-string\">0859744755d73e5967081c3bedceffc5db88ac00000000\"</span>,\n  <span class=\"cm-string\">\"complete\"</span>: <span class=\"cm-atom\">true</span>\n}</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">SIGNED_RAW_TX</span><span class=\"cm-operator\">=</span>0100000001a8364935baa9ef11de59a7ee3d956934d75297[...]</span>\n</code></pre>\n<p>Even though the transaction is now complete, the Dash Core &lt;&lt;glossary:node&gt;&gt; we&#39;re connected to doesn&#39;t know anything about the transaction, nor does any other part of the &lt;&lt;glossary:network&gt;&gt;. We&#39;ve created a spend, but we haven&#39;t actually spent anything because we could simply unset the <code>$SIGNED_RAW_TX</code> variable to eliminate the transaction.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-6-send-raw-transaction\"></div>6. Send raw transaction<a class=\"fa fa-anchor\" href=\"#section-6-send-raw-transaction\"></a></h1>\n<p>Send the signed transaction to the connected node using the <a href=\"core-api-ref-remote-procedure-calls-raw-transaction#section-sendrawtransaction\"><code>sendrawtransaction</code> RPC</a>. After accepting the transaction, the node would usually then broadcast it to other &lt;&lt;glossary:peers&gt;&gt;, but we&#39;re not currently connected to other peers because we started in &lt;&lt;glossary:regression test mode&gt;&gt;.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(559)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-559\">dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX</textarea>\n\t\t\t<pre id=\"code-559\"><code><span class='cm-s-neo'>dash-cli <span class=\"cm-attribute\">-regtest</span> sendrawtransaction <span class=\"cm-def\">$SIGNED_RAW_TX</span></span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-bash\"><span class='cm-s-neo'>fa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-7-mine-a-block\"></div>7. Mine a block<a class=\"fa fa-anchor\" href=\"#section-7-mine-a-block\"></a></h1>\n<p>Generate a block to confirm the transaction and then clear our shell variables.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(531)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-531\">dash-cli -regtest generate 1\n\nunset UTXO_TXID UTXO_VOUT NEW_ADDRESS RAW_TX SIGNED_RAW_TX</textarea>\n\t\t\t<pre id=\"code-531\"><code><span class='cm-s-neo'>dash-cli <span class=\"cm-attribute\">-regtest</span> generate <span class=\"cm-number\">1</span>\n\n<span class=\"cm-keyword\">unset</span> UTXO_TXID UTXO_VOUT NEW_ADDRESS RAW_TX SIGNED_RAW_TX</span></code></pre></span>\n\t</div>\n</div>"
}