{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "title": "ZMQ Example",
 "updates": [],
 "type": "basic",
 "slug": "core-api-ref-zmq-example",
 "excerpt": "",
 "body": "The following Python example is found in the [Dash Core repository](https://github.com/dashpay/dash/blob/master/contrib/zmq/zmq_sub3.4.py):\n\n```python\n#!/usr/bin/env python3\n# Copyright (c) 2014-2016 The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\n\"\"\"\n    ZMQ example using python3's asyncio\n\n    Dash should be started with the command line arguments:\n        dashd -testnet -daemon \\\n                -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n                -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n                -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n                -zmqpubhashblock=tcp://127.0.0.1:28332\n\n    We use the asyncio library here.  `self.handle()` installs itself as a\n    future at the end of the function.  Since it never returns with the event\n    loop having an empty stack of futures, this creates an infinite loop.  An\n    alternative is to wrap the contents of `handle` inside `while True`.\n\n    The `@asyncio.coroutine` decorator and the `yield from` syntax found here\n    was introduced in python 3.4 and has been deprecated in favor of the `async`\n    and `await` keywords respectively.\n\n    A blocking example using python 2.7 can be obtained from the git history:\n    https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n\"\"\"\n\nimport binascii\nimport asyncio\nimport zmq\nimport zmq.asyncio\nimport signal\nimport struct\nimport sys\n\nif not (sys.version_info.major >= 3 and sys.version_info.minor >= 4):\n    print(\"This example only works with Python 3.4 and greater\")\n    exit(1)\n\nport = 28332\n\nclass ZMQHandler():\n    def __init__(self):\n        self.loop = asyncio.get_event_loop()\n        self.zmqContext = zmq.asyncio.Context()\n\n        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashchainlock\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtxlock\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashgovernancevote\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashgovernanceobject\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashinstantsenddoublespend\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawchainlock\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawchainlocksig\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtxlock\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtxlocksig\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawgovernancevote\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawgovernanceobject\")\n        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawinstantsenddoublespend\")\n        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n\n    @asyncio.coroutine\n    def handle(self) :\n        msg = yield from self.zmqSubSocket.recv_multipart()\n        topic = msg[0]\n        body = msg[1]\n        sequence = \"Unknown\"\n        if len(msg[-1]) == 4:\n          msgSequence = struct.unpack('<I', msg[-1])[-1]\n          sequence = str(msgSequence)\n        if topic == b\"hashblock\":\n            print('- HASH BLOCK ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"hashchainlock\":\n            print('- HASH CHAINLOCK ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"hashtx\":\n            print ('- HASH TX ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"hashtxlock\":\n            print('- HASH TX LOCK ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"hashgovernancevote\":\n            print('- HASH GOVERNANCE VOTE ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"hashgovernanceobject\":\n            print('- HASH GOVERNANCE OBJECT ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"hashinstantsenddoublespend\":\n            print('- HASH IS DOUBLE SPEND ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"rawblock\":\n            print('- RAW BLOCK HEADER ('+sequence+') -')\n            print(binascii.hexlify(body[:80]).decode(\"utf-8\"))\n        elif topic == b\"rawchainlock\":\n            print('- RAW CHAINLOCK ('+sequence+') -')\n            print(binascii.hexlify(body[:80]).decode(\"utf-8\"))\n        elif topic == b\"rawchainlocksig\":\n            print('- RAW CHAINLOCK SIG ('+sequence+') -')\n            print(binascii.hexlify(body[:80]).decode(\"utf-8\"))\n        elif topic == b\"rawtx\":\n            print('- RAW TX ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"rawtxlock\":\n            print('- RAW TX LOCK ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"rawtxlocksig\":\n            print('- RAW TX LOCK SIG ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"rawgovernancevote\":\n            print('- RAW GOVERNANCE VOTE ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"rawgovernanceobject\":\n            print('- RAW GOVERNANCE OBJECT ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        elif topic == b\"rawinstantsenddoublespend\":\n            print('- RAW IS DOUBLE SPEND ('+sequence+') -')\n            print(binascii.hexlify(body).decode(\"utf-8\"))\n        # schedule ourselves to receive the next message\n        asyncio.ensure_future(self.handle())\n\n    def start(self):\n        self.loop.add_signal_handler(signal.SIGINT, self.stop)\n        self.loop.create_task(self.handle())\n        self.loop.run_forever()\n\n    def stop(self):\n        self.loop.stop()\n        self.zmqContext.destroy()\n\ndaemon = ZMQHandler()\ndaemon.start()\n```",
 "order": 999,
 "isReference": false,
 "hidden": true,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "createdAt": "2020-05-13T14:44:00.426Z",
 "updatedAt": "2020-05-13T16:26:12.078Z",
 "_id": "5ebc1fa0d24ce30409d3f9a5",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "5ebc1f1e39065f00110c31d2",
 "category": "5e96055329a18c0025d391e6",
 "project": "5daf2e65f4109c0040fd51e1",
 "version": "5e96055329a18c0025d39261",
 "__v": 0,
 "isApi": false,
 "id": "5ebc1fa0d24ce30409d3f9a5",
 "body_html": "<div class=\"magic-block-textarea\"><p>The following Python example is found in the <a href=\"https://github.com/dashpay/dash/blob/master/contrib/zmq/zmq_sub3.4.py\">Dash Core repository</a>:</p>\n<pre><code class=\"lang-python\"><span class='cm-s-neo'><span class=\"cm-comment\">#!&#47;usr&#47;bin&#47;env python3</span>\n<span class=\"cm-comment\"># Copyright (c) 2014-2016 The Bitcoin Core developers</span>\n<span class=\"cm-comment\"># Distributed under the MIT software license, see the accompanying</span>\n<span class=\"cm-comment\"># file COPYING or http:&#47;&#47;www.opensource.org&#47;licenses&#47;mit-license.php.</span>\n\n<span class=\"cm-string\">\"\"\"</span>\n<span class=\"cm-string\">    ZMQ example using python3's asyncio</span>\n\n<span class=\"cm-string\">    Dash should be started with the command line arguments:</span>\n<span class=\"cm-string\">        dashd -testnet -daemon \\</span>\n<span class=\"cm-string\">                -zmqpubrawtx=tcp:&#47;&#47;127.0.0.1:28332 \\</span>\n<span class=\"cm-string\">                -zmqpubrawblock=tcp:&#47;&#47;127.0.0.1:28332 \\</span>\n<span class=\"cm-string\">                -zmqpubhashtx=tcp:&#47;&#47;127.0.0.1:28332 \\</span>\n<span class=\"cm-string\">                -zmqpubhashblock=tcp:&#47;&#47;127.0.0.1:28332</span>\n\n<span class=\"cm-string\">    We use the asyncio library here.  `self.handle()` installs itself as a</span>\n<span class=\"cm-string\">    future at the end of the function.  Since it never returns with the event</span>\n<span class=\"cm-string\">    loop having an empty stack of futures, this creates an infinite loop.  An</span>\n<span class=\"cm-string\">    alternative is to wrap the contents of `handle` inside `while True`.</span>\n\n<span class=\"cm-string\">    The `@asyncio.coroutine` decorator and the `yield from` syntax found here</span>\n<span class=\"cm-string\">    was introduced in python 3.4 and has been deprecated in favor of the `async`</span>\n<span class=\"cm-string\">    and `await` keywords respectively.</span>\n\n<span class=\"cm-string\">    A blocking example using python 2.7 can be obtained from the git history:</span>\n<span class=\"cm-string\">    https:&#47;&#47;github.com&#47;bitcoin&#47;bitcoin&#47;blob&#47;37a7fe9e440b83e2364d5498931253937abe9294&#47;contrib&#47;zmq&#47;zmq_sub.py</span>\n<span class=\"cm-string\">\"\"\"</span>\n\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">binascii</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">asyncio</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">zmq</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">asyncio</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">signal</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">struct</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">sys</span>\n\n<span class=\"cm-keyword\">if</span> <span class=\"cm-keyword\">not</span> (<span class=\"cm-variable\">sys</span>.<span class=\"cm-property\">version_info</span>.<span class=\"cm-property\">major</span> <span class=\"cm-operator\">&gt;=</span> <span class=\"cm-number\">3</span> <span class=\"cm-keyword\">and</span> <span class=\"cm-variable\">sys</span>.<span class=\"cm-property\">version_info</span>.<span class=\"cm-property\">minor</span> <span class=\"cm-operator\">&gt;=</span> <span class=\"cm-number\">4</span>):\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">\"This example only works with Python 3.4 and greater\"</span>)\n    <span class=\"cm-variable\">exit</span>(<span class=\"cm-number\">1</span>)\n\n<span class=\"cm-variable\">port</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">28332</span>\n\n<span class=\"cm-keyword\">class</span> <span class=\"cm-def\">ZMQHandler</span>():\n    <span class=\"cm-keyword\">def</span> <span class=\"cm-def\">__init__</span>(<span class=\"cm-variable-2\">self</span>):\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">loop</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">asyncio</span>.<span class=\"cm-property\">get_event_loop</span>()\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqContext</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">asyncio</span>.<span class=\"cm-property\">Context</span>()\n\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqContext</span>.<span class=\"cm-property\">socket</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUB</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"hashblock\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"hashchainlock\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"hashtx\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"hashtxlock\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"hashgovernancevote\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"hashgovernanceobject\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"hashinstantsenddoublespend\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawblock\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawchainlock\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawchainlocksig\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawtx\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawtxlock\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawtxlocksig\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawgovernancevote\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawgovernanceobject\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">setsockopt_string</span>(<span class=\"cm-variable\">zmq</span>.<span class=\"cm-property\">SUBSCRIBE</span>, <span class=\"cm-string\">\"rawinstantsenddoublespend\"</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">connect</span>(<span class=\"cm-string\">\"tcp:&#47;&#47;127.0.0.1:%i\"</span> <span class=\"cm-operator\">%</span> <span class=\"cm-variable\">port</span>)\n\n    <span class=\"cm-meta\">@asyncio</span>.<span class=\"cm-property\">coroutine</span>\n    <span class=\"cm-keyword\">def</span> <span class=\"cm-def\">handle</span>(<span class=\"cm-variable-2\">self</span>) :\n        <span class=\"cm-variable\">msg</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">yield</span> <span class=\"cm-keyword\">from</span> <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqSubSocket</span>.<span class=\"cm-property\">recv_multipart</span>()\n        <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">msg</span>[<span class=\"cm-number\">0</span>]\n        <span class=\"cm-variable\">body</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">msg</span>[<span class=\"cm-number\">1</span>]\n        <span class=\"cm-variable\">sequence</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"Unknown\"</span>\n        <span class=\"cm-keyword\">if</span> <span class=\"cm-builtin\">len</span>(<span class=\"cm-variable\">msg</span>[<span class=\"cm-operator\">-</span><span class=\"cm-number\">1</span>]) <span class=\"cm-operator\">==</span> <span class=\"cm-number\">4</span>:\n          <span class=\"cm-variable\">msgSequence</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">struct</span>.<span class=\"cm-property\">unpack</span>(<span class=\"cm-string\">'&lt;I'</span>, <span class=\"cm-variable\">msg</span>[<span class=\"cm-operator\">-</span><span class=\"cm-number\">1</span>])[<span class=\"cm-operator\">-</span><span class=\"cm-number\">1</span>]\n          <span class=\"cm-variable\">sequence</span> <span class=\"cm-operator\">=</span> <span class=\"cm-builtin\">str</span>(<span class=\"cm-variable\">msgSequence</span>)\n        <span class=\"cm-keyword\">if</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"hashblock\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- HASH BLOCK ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"hashchainlock\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- HASH CHAINLOCK ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"hashtx\"</span>:\n            <span class=\"cm-builtin\">print</span> (<span class=\"cm-string\">'- HASH TX ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"hashtxlock\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- HASH TX LOCK ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"hashgovernancevote\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- HASH GOVERNANCE VOTE ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"hashgovernanceobject\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- HASH GOVERNANCE OBJECT ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"hashinstantsenddoublespend\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- HASH IS DOUBLE SPEND ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawblock\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW BLOCK HEADER ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>[:<span class=\"cm-number\">80</span>]).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawchainlock\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW CHAINLOCK ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>[:<span class=\"cm-number\">80</span>]).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawchainlocksig\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW CHAINLOCK SIG ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>[:<span class=\"cm-number\">80</span>]).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawtx\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW TX ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawtxlock\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW TX LOCK ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawtxlocksig\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW TX LOCK SIG ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawgovernancevote\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW GOVERNANCE VOTE ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawgovernanceobject\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW GOVERNANCE OBJECT ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-keyword\">elif</span> <span class=\"cm-variable\">topic</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\">b\"rawinstantsenddoublespend\"</span>:\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'- RAW IS DOUBLE SPEND ('</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">sequence</span><span class=\"cm-operator\">+</span><span class=\"cm-string\">') -'</span>)\n            <span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">binascii</span>.<span class=\"cm-property\">hexlify</span>(<span class=\"cm-variable\">body</span>).<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"utf-8\"</span>))\n        <span class=\"cm-comment\"># schedule ourselves to receive the next message</span>\n        <span class=\"cm-variable\">asyncio</span>.<span class=\"cm-property\">ensure_future</span>(<span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">handle</span>())\n\n    <span class=\"cm-keyword\">def</span> <span class=\"cm-def\">start</span>(<span class=\"cm-variable-2\">self</span>):\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">loop</span>.<span class=\"cm-property\">add_signal_handler</span>(<span class=\"cm-variable\">signal</span>.<span class=\"cm-property\">SIGINT</span>, <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">stop</span>)\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">loop</span>.<span class=\"cm-property\">create_task</span>(<span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">handle</span>())\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">loop</span>.<span class=\"cm-property\">run_forever</span>()\n\n    <span class=\"cm-keyword\">def</span> <span class=\"cm-def\">stop</span>(<span class=\"cm-variable-2\">self</span>):\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">loop</span>.<span class=\"cm-property\">stop</span>()\n        <span class=\"cm-variable-2\">self</span>.<span class=\"cm-property\">zmqContext</span>.<span class=\"cm-property\">destroy</span>()\n\n<span class=\"cm-variable\">daemon</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">ZMQHandler</span>()\n<span class=\"cm-variable\">daemon</span>.<span class=\"cm-property\">start</span>()</span>\n</code></pre>\n\n</div>"
}