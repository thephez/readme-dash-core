{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "P2P Network",
    "slug": "core-examples-p2p-network",
    "category": "Core Examples"
   }
  ]
 },
 "title": "P2SH Multisig",
 "updates": [],
 "type": "basic",
 "slug": "core-examples-transaction-tutorial-p2sh-multisig",
 "excerpt": "",
 "body": "In this subsection, we will create a <<glossary:P2SH multisig>> address, spend <<glossary:duffs>> to it, and then spend those duffs from it to another <<glossary:address>>.\n\nCreating a <<glossary:multisig>> address is easy. Multisig <<glossary:outputs>> have two parameters, the *minimum* number of signatures required (*m*) and the *number* of <<glossary:public keys>> to use to validate those signatures. This is called m-of-n, and in this case we'll be using 2-of-3.\n\n# 1. Get new addresses\n\nGenerate three new P2PKH addresses. A <<glossary:P2PKH address>> cannot be used with the multisig redeem script created below. (Hashing each public key is unnecessary anyway---all the public keys are protected by a hash when the <<glossary:redeem script>> is hashed.) However, Dash Core uses addresses as a way to reference the underlying full (unhashed) public keys it knows about, so we get the three new addresses above in order to use their public keys.\n\nRecall from the Guide that the hashed public keys used in addresses obfuscate the full public key, so you cannot give an address to another person or device as part of creating a typical multisig output or P2SH multisig redeem script. You must give them a full public key.\n\n``` bash\n    > dash-cli -regtest getnewaddress\n    yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    > dash-cli -regtest getnewaddress\n    yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    > dash-cli -regtest getnewaddress\n    yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\n\n    > NEW_ADDRESS1=yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    > NEW_ADDRESS2=yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    > NEW_ADDRESS3=yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\n```\n\n# 2. Get public key\n\nUse the [`validateaddress` RPC](core-api-ref-remote-procedure-calls-util#section-validate-address) to display the full (unhashed) public key for one of the addresses.  This is the information which will actually be included in the multisig redeem script.  This is also the information you would give another person or device as part of creating a multisig output or P2SH multisig redeem script.\n\nWe save the address returned to a shell variable.\n\n``` bash\n> dash-cli -regtest validateaddress $NEW_ADDRESS3\n```\n``` json\n{\n  \"isvalid\": true,\n  \"address\": \"yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\",\n  \"scriptPubKey\": \"76a91404caa000366b99780f8e606ccc818883ca7f48f888ac\",\n  \"ismine\": true,\n  \"iswatchonly\": false,\n  \"isscript\": false,\n  \"pubkey\": \"038007ef6fd812d73da054271b68a42dae06672cff2a30b2814935537e593\\\n              0ebf6\",\n  \"iscompressed\": true,\n  \"account\": \"\"\n}\n\n```\n``` bash\n\n> NEW_ADDRESS3_PUBLIC_KEY=038007ef6fd812d73da054271b68a42dae0667[...]\n```\n\n# 3. Create multisig address\n\nUse the [`createmultisig` RPC](core-api-ref-remote-procedure-calls-util#section-create-multi-sig) with two arguments, the number (*n*) of signatures required and a list of addresses or public keys.  Because P2PKH addresses can't be used in the multisig redeem script created by this RPC, the only addresses which can be provided are those belonging to a public key in the <<glossary:wallet>>.  In this case, we provide two addresses and one public key---all of which will be converted to public keys in the redeem script.\n\nThe P2SH address is returned along with the redeem script which must be provided when we spend duffs sent to the P2SH address.\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"**Warning:** You must not lose the redeem script, especially if you don't have a record of which public keys you used to create the P2SH multisig address. You need the redeem script to spend any dash sent to the P2SH address. \\n\\nIf you lose the redeem script, you can recreate it by running the same command above, with the public keys listed in the same order. **However, if you lose both the redeem script and even one of the public keys, you will never be able to spend duffs sent to that P2SH address.**\",\n  \"title\": \"Redeem Script\"\n}\n[/block]\nNeither the address nor the redeem script are stored in the wallet when you use `createmultisig`. To store them in the wallet, use the [`addmultisigaddress` RPC](core-api-ref-remote-procedure-calls-wallet#section-add-multi-sig-address) instead.  If you add an address to the wallet, you should also make a new backup.\n\n``` bash\n> dash-cli -regtest createmultisig 2 '''\n    [\n      \"'$NEW_ADDRESS1'\",\n      \"'$NEW_ADDRESS2'\",\n      \"'$NEW_ADDRESS3_PUBLIC_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"address\": \"8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\",\n  \"redeemScript\": \"522103fa8866cccae3c975a72884443a351801a0ea9721cbe721558\\\n                  6ddd6fab5f39f262103b2259f42a241f4870e794521594f2af7aadf0\\\n                  e4c580a43582e58630e4618634621038007ef6fd812d73da054271b6\\\n                  8a42dae06672cff2a30b2814935537e5930ebf653ae\"\n}\n```\n``` bash\n\n> P2SH_ADDRESS=8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\n> P2SH_REDEEM_SCRIPT=522103fa8866cccae3c975a72884443a351801a0ea9[...]\n```\n\n# 4. Fund multisig address\n\nPaying the P2SH multisig address with Dash Core is as simple as paying a more common P2PKH address. Here we use the same command (but different variable) we used in the [Simple Spending subsection](core-examples-transaction-tutorial-simple-spending). As before, this command automatically selects an UTXO, creates a <<glossary:change output>> to a new one of our P2PKH addresses if necessary, and pays a <<glossary:transaction fee>> if necessary.\n\nWe save that <<glossary:TXID>> to a shell variable as the TXID of the UTXO we plan to spend next.\n\n``` bash\n> dash-cli -regtest sendtoaddress $P2SH_ADDRESS 10.00\nddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52\n\n> UTXO_TXID=ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b7[...]\n```\n\n# 5. Get decoded transaction\n\nWe use the [`getrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#section-get-raw-transaction) with the optional second argument (*true*) to get the decoded transaction we just created with `sendtoaddress`. We choose one of the <<glossary:outputs>> to be our UTXO and get its <<glossary:output index>> number (vout) and <<glossary:pubkey script>> (scriptPubKey).\n\n``` bash\n> dash-cli -regtest getrawtransaction $UTXO_TXID 1\n```\n``` json\n{\n  \"hex\": \"010000000130d100f7762956100a2396403c60e13e7a13520167acc6d38978ec\\\n          33ada44cf8010000006b48304502210084effe3132550e6ba43a7f4cc54ad30d\\\n          001c0dbc3ea66d638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb\\\n          2a30b0112969717e469a722bca0263e0975d01210324c2226564b19f0948306b\\\n          b7160a735c28001bbd046cd46059df9f8434f41254feffffff0200ca9a3b0000\\\n          000017a9144f334f26e350c8903c92ff25b733670902cfad5a8700e0052d0b00\\\n          00001976a91479165c2155b8fec5c702ec7f251d0982f27b402988ac67000000\",\n  \"txid\": \"ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52\",\n  \"size\": 224,\n  \"version\": 1,\n  \"locktime\": 103,\n  \"vin\": [\n    {\n      \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f70\\\n                0d130\",\n      \"vout\": 1,\n      \"scriptSig\": {\n        \"asm\": \"304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d63\\\n                8e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b01129\\\n                69717e469a722bca0263e0975d[ALL] 0324c2226564b19f0948306bb7\\\n                160a735c28001bbd046cd46059df9f8434f41254\",\n        \"hex\": \"48304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d\\\n                638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b011\\\n                2969717e469a722bca0263e0975d01210324c2226564b19f0948306bb7\\\n                160a735c28001bbd046cd46059df9f8434f41254\"\n      },\n      \"sequence\": 4294967294\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 10.00000000,\n      \"valueSat\": 1000000000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_HASH160 4f334f26e350c8903c92ff25b733670902cfad5a OP_EQUAL\",\n        \"hex\": \"a9144f334f26e350c8903c92ff25b733670902cfad5a87\",\n        \"reqSigs\": 1,\n        \"type\": \"scripthash\",\n        \"addresses\": [\n          \"8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\"\n        ]\n      }\n    },\n    {\n      \"value\": 480.00000000,\n      \"valueSat\": 48000000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 79165c2155b8fec5c702ec7f251d0982f27b4029\\\n                OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a91479165c2155b8fec5c702ec7f251d0982f27b402988ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yXMhQ1L5q3PcnJgEhyAFztQPPRaEr8Mh8s\"\n        ]\n      }\n    }\n  ]\n}\n```\n``` bash\n\n> UTXO_VOUT=0\n> UTXO_OUTPUT_SCRIPT=a9144f334f26e350c8903c92ff25b733670902cfad5a87\n```\n\n# 6. Get new address\n\nWe generate a new P2PKH address to use in the output we're about to create.\n\n``` bash\n> dash-cli -regtest getnewaddress\nyZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr\n\n> NEW_ADDRESS4=yZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr\n```\n\n# 7. Create raw transaction\n\nWe generate the <<glossary:raw transaction>> the same way we did in the [Simple Raw Transaction subsection](core-examples-transaction-tutorial-simple-raw-transaction).\n\n``` bash\n## Outputs - inputs = transaction fee, so always double-check your math!\n> dash-cli -regtest createrawtransaction '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT'\n      }\n   ]\n   ''' '''\n   {\n     \"'$NEW_ADDRESS4'\": 9.998\n   }'''\n\n0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n24eba2b2dd0000000000ffffffff01c0bc973b000000001976a914900504f96c\\\n55d6ebe1c33581ba9430ca05b12a1488ac00000000\n\n010000000175e1769813db8418fea17576694af1ff31cb2b512b7333e6eb42f0\\\n30d0d778720000000000ffffffff01c0bc973b000000001976a914b6f64f5bf3\\\ne38f25ead28817df7929c06fe847ee88ac00000000\n\n> RAW_TX=0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd[...]\n```\n\n# 8. Get private key\n\nWe get the <<glossary:private keys>> for two of the <<glossary:public keys>> we used to create the transaction, the same way we got private keys in the [Complex Raw Transaction subsection](/docs/core-examples-transaction-tutorial-complex-raw-transaction). Recall that we created a 2-of-3 multisig pubkey script, so signatures from two private keys are needed.\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"**Reminder:** Users should never manually manage private keys on mainnet. See the warning in the [complex raw transaction section](core-examples-transaction-tutorial-complex-raw-transaction).\",\n  \"title\": \"Private Key Warning\"\n}\n[/block]\n``` bash\n> dash-cli -regtest dumpprivkey $NEW_ADDRESS1\ncThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQaTK2zVp7sVrHdmv\n> dash-cli -regtest dumpprivkey $NEW_ADDRESS3\ncUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTPJDiBDu8dRD3EjzF\n\n> NEW_ADDRESS1_PRIVATE_KEY=cThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQ[...]\n> NEW_ADDRESS3_PRIVATE_KEY=cUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTP[...]\n```\n\n# 9. Sign raw transaction\n\n## 9a. Private Key 1\n\nWe make the first <<glossary:signature>>. The input argument (JSON object) takes the additional <<glossary:redeem script>> parameter so that it can append the redeem script to the <<glossary:signature script>> after the two signatures.\n\n``` bash\n> dash-cli -regtest signrawtransaction $RAW_TX '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT',\n        \"scriptPubKey\": \"'$UTXO_OUTPUT_SCRIPT'\",\n        \"redeemScript\": \"'$P2SH_REDEEM_SCRIPT'\"\n      }\n    ]\n    ''' '''\n    [\n      \"'$NEW_ADDRESS1_PRIVATE_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n          24eba2b2dd00000000b40047304402201cc50eac6d2db04dabd8ccd68b3116c0\\\n          a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\\n          f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866cccae3c975\\\n          a72884443a351801a0ea9721cbe7215586ddd6fab5f39f262103b2259f42a241\\\n          f4870e794521594f2af7aadf0e4c580a43582e58630e4618634621038007ef6f\\\n          d812d73da054271b68a42dae06672cff2a30b2814935537e5930ebf653aeffff\\\n          ffff01c0bc973b000000001976a914900504f96c55d6ebe1c33581ba9430ca05\\\n          b12a1488ac00000000\",\n  \"complete\": false,\n  \"errors\": [\n    {\n      \"txid\": \"ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779\\\n                f9c52\",\n      \"vout\": 0,\n      \"scriptSig\": \"0047304402201cc50eac6d2db04dabd8ccd68b3116c0a8d37e7e41\\\n                    335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\\n                    f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866\\\n                    cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5f3\\\n                    9f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43\\\n                    582e58630e4618634621038007ef6fd812d73da054271b68a42dae\\\n                    06672cff2a30b2814935537e5930ebf653ae\",\n      \"sequence\": 4294967295,\n      \"error\": \"Operation not valid with the current stack size\"\n    }\n  ]\n}\n```\n``` bash\n\n> PARTLY_SIGNED_RAW_TX=010000000175e1769813db8418fea17576694af1f[...]\n```\n\n## 9b. Private Key 3\n\nThe `signrawtransaction` call used here is nearly identical to the one used above.  The only difference is the private key used.  Now that the two required signatures have been provided, the transaction is marked as complete.\n\n``` bash\n> dash-cli -regtest signrawtransaction $PARTLY_SIGNED_RAW_TX '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT',\n        \"scriptPubKey\": \"'$UTXO_OUTPUT_SCRIPT'\",\n        \"redeemScript\": \"'$P2SH_REDEEM_SCRIPT'\"\n      }\n    ]\n    ''' '''\n    [\n      \"'$NEW_ADDRESS3_PRIVATE_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n          24eba2b2dd00000000fdfd000047304402201cc50eac6d2db04dabd8ccd68b31\\\n          16c0a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01\\\n          556ff2ff9c48c39ff434fdfb1d9e0284fbde770101483045022100e0e1f95f1a\\\n          b85814ee0920d5bd28c6831086e838af4bec344fd8654a0b58525f022075989f\\\n          d3a677e1522aa85d45c41720aec9e7c127acadb6c14338c3b1a768ab28014c69\\\n          522103fa8866cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5\\\n          f39f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43582e5863\\\n          0e4618634621038007ef6fd812d73da054271b68a42dae06672cff2a30b28149\\\n          35537e5930ebf653aeffffffff01c0bc973b000000001976a914900504f96c55\\\n          d6ebe1c33581ba9430ca05b12a1488ac00000000\",\n  \"complete\": true\n}\n```\n``` bash\n\n> SIGNED_RAW_TX=0100000001529c9f774521b7f5104b709e899d8547078ca4[...]\n```\n\n# 10. Send raw transaction\n\nWe send the transaction spending the P2SH multisig output to the local <<glossary:node>>, which accepts it.\n\n``` bash\n> dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\n483061b32894aacf6c4050291252a480c2a4c869eb85bd45082fb87d6b175ae8\n```",
 "order": 4,
 "isReference": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "createdAt": "2019-10-24T15:54:10.361Z",
 "updatedAt": "2020-02-12T17:34:49.214Z",
 "_id": "5e96055329a18c0025d3921e",
 "version": "5e96055329a18c0025d39261",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5af39863989da435b05d284d",
 "parentDoc": "5e96055329a18c0025d39219",
 "category": "5e96055329a18c0025d391e5",
 "__v": 1,
 "isApi": false,
 "id": "5e96055329a18c0025d3921e",
 "body_html": "<div class=\"magic-block-textarea\"><p>In this subsection, we will create a &lt;&lt;glossary:P2SH multisig&gt;&gt; address, spend &lt;&lt;glossary:duffs&gt;&gt; to it, and then spend those duffs from it to another &lt;&lt;glossary:address&gt;&gt;.</p>\n<p>Creating a &lt;&lt;glossary:multisig&gt;&gt; address is easy. Multisig &lt;&lt;glossary:outputs&gt;&gt; have two parameters, the <em>minimum</em> number of signatures required (<em>m</em>) and the <em>number</em> of &lt;&lt;glossary:public keys&gt;&gt; to use to validate those signatures. This is called m-of-n, and in this case we&#39;ll be using 2-of-3.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-1-get-new-addresses\"></div>1. Get new addresses<a class=\"fa fa-anchor\" href=\"#section-1-get-new-addresses\"></a></h1>\n<p>Generate three new P2PKH addresses. A &lt;&lt;glossary:P2PKH address&gt;&gt; cannot be used with the multisig redeem script created below. (Hashing each public key is unnecessary anyway---all the public keys are protected by a hash when the &lt;&lt;glossary:redeem script&gt;&gt; is hashed.) However, Dash Core uses addresses as a way to reference the underlying full (unhashed) public keys it knows about, so we get the three new addresses above in order to use their public keys.</p>\n<p>Recall from the Guide that the hashed public keys used in addresses obfuscate the full public key, so you cannot give an address to another person or device as part of creating a typical multisig output or P2SH multisig redeem script. You must give them a full public key.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>    &gt; dash-cli <span class=\"cm-attribute\">-regtest</span> getnewaddress\n    yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    &gt; dash-cli <span class=\"cm-attribute\">-regtest</span> getnewaddress\n    yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    &gt; dash-cli <span class=\"cm-attribute\">-regtest</span> getnewaddress\n    yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\n\n    &gt; <span class=\"cm-def\">NEW_ADDRESS1</span><span class=\"cm-operator\">=</span>yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    &gt; <span class=\"cm-def\">NEW_ADDRESS2</span><span class=\"cm-operator\">=</span>yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    &gt; <span class=\"cm-def\">NEW_ADDRESS3</span><span class=\"cm-operator\">=</span>yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-2-get-public-key\"></div>2. Get public key<a class=\"fa fa-anchor\" href=\"#section-2-get-public-key\"></a></h1>\n<p>Use the <a href=\"core-api-ref-remote-procedure-calls-util#section-validate-address\"><code>validateaddress</code> RPC</a> to display the full (unhashed) public key for one of the addresses.  This is the information which will actually be included in the multisig redeem script.  This is also the information you would give another person or device as part of creating a multisig output or P2SH multisig redeem script.</p>\n<p>We save the address returned to a shell variable.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> validateaddress <span class=\"cm-def\">$NEW_ADDRESS3</span></span>\n</code></pre>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"isvalid\"</span>: <span class=\"cm-atom\">true</span>,\n  <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\"</span>,\n  <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"76a91404caa000366b99780f8e606ccc818883ca7f48f888ac\"</span>,\n  <span class=\"cm-property\">\"ismine\"</span>: <span class=\"cm-atom\">true</span>,\n  <span class=\"cm-property\">\"iswatchonly\"</span>: <span class=\"cm-atom\">false</span>,\n  <span class=\"cm-property\">\"isscript\"</span>: <span class=\"cm-atom\">false</span>,\n  <span class=\"cm-property\">\"pubkey\"</span>: <span class=\"cm-string\">\"038007ef6fd812d73da054271b68a42dae06672cff2a30b2814935537e593\\</span>\n              <span class=\"cm-string\">0ebf6\"</span>,\n  <span class=\"cm-string\">\"iscompressed\"</span>: <span class=\"cm-atom\">true</span>,\n  <span class=\"cm-string\">\"account\"</span>: <span class=\"cm-string\">\"\"</span>\n}</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">NEW_ADDRESS3_PUBLIC_KEY</span><span class=\"cm-operator\">=</span>038007ef6fd812d73da054271b68a42dae0667[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-3-create-multisig-address\"></div>3. Create multisig address<a class=\"fa fa-anchor\" href=\"#section-3-create-multisig-address\"></a></h1>\n<p>Use the <a href=\"core-api-ref-remote-procedure-calls-util#section-create-multi-sig\"><code>createmultisig</code> RPC</a> with two arguments, the number (<em>n</em>) of signatures required and a list of addresses or public keys.  Because P2PKH addresses can&#39;t be used in the multisig redeem script created by this RPC, the only addresses which can be provided are those belonging to a public key in the &lt;&lt;glossary:wallet&gt;&gt;.  In this case, we provide two addresses and one public key---all of which will be converted to public keys in the redeem script.</p>\n<p>The P2SH address is returned along with the redeem script which must be provided when we spend duffs sent to the P2SH address.</p>\n\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Redeem Script\n\t</h3>\n\t<div class=\"callout-body\"><p><strong>Warning:</strong> You must not lose the redeem script, especially if you don&#39;t have a record of which public keys you used to create the P2SH multisig address. You need the redeem script to spend any dash sent to the P2SH address. </p>\n<p>If you lose the redeem script, you can recreate it by running the same command above, with the public keys listed in the same order. <strong>However, if you lose both the redeem script and even one of the public keys, you will never be able to spend duffs sent to that P2SH address.</strong></p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Neither the address nor the redeem script are stored in the wallet when you use <code>createmultisig</code>. To store them in the wallet, use the <a href=\"core-api-ref-remote-procedure-calls-wallet#section-add-multi-sig-address\"><code>addmultisigaddress</code> RPC</a> instead.  If you add an address to the wallet, you should also make a new backup.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> createmultisig <span class=\"cm-number\">2</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS1</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS2</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS3_PUBLIC_KEY</span><span class=\"cm-string\">'\"</span>\n<span class=\"cm-string\">    ]'''</span></span>\n</code></pre>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\"</span>,\n  <span class=\"cm-property\">\"redeemScript\"</span>: <span class=\"cm-string\">\"522103fa8866cccae3c975a72884443a351801a0ea9721cbe721558\\</span>\n                  <span class=\"cm-string\">6ddd6fab5f39f262103b2259f42a241f4870e794521594f2af7aadf0\\</span>\n                  <span class=\"cm-string\">e4c580a43582e58630e4618634621038007ef6fd812d73da054271b6\\</span>\n                  <span class=\"cm-string\">8a42dae06672cff2a30b2814935537e5930ebf653ae\"</span>\n}</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">P2SH_ADDRESS</span><span class=\"cm-operator\">=</span>8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\n&gt; <span class=\"cm-def\">P2SH_REDEEM_SCRIPT</span><span class=\"cm-operator\">=</span>522103fa8866cccae3c975a72884443a351801a0ea9[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-4-fund-multisig-address\"></div>4. Fund multisig address<a class=\"fa fa-anchor\" href=\"#section-4-fund-multisig-address\"></a></h1>\n<p>Paying the P2SH multisig address with Dash Core is as simple as paying a more common P2PKH address. Here we use the same command (but different variable) we used in the <a href=\"core-examples-transaction-tutorial-simple-spending\">Simple Spending subsection</a>. As before, this command automatically selects an UTXO, creates a &lt;&lt;glossary:change output&gt;&gt; to a new one of our P2PKH addresses if necessary, and pays a &lt;&lt;glossary:transaction fee&gt;&gt; if necessary.</p>\n<p>We save that &lt;&lt;glossary:TXID&gt;&gt; to a shell variable as the TXID of the UTXO we plan to spend next.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> sendtoaddress <span class=\"cm-def\">$P2SH_ADDRESS</span> <span class=\"cm-number\">10</span>.00\nddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52\n\n&gt; <span class=\"cm-def\">UTXO_TXID</span><span class=\"cm-operator\">=</span>ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b7[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-5-get-decoded-transaction\"></div>5. Get decoded transaction<a class=\"fa fa-anchor\" href=\"#section-5-get-decoded-transaction\"></a></h1>\n<p>We use the <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#section-get-raw-transaction\"><code>getrawtransaction</code> RPC</a> with the optional second argument (<em>true</em>) to get the decoded transaction we just created with <code>sendtoaddress</code>. We choose one of the &lt;&lt;glossary:outputs&gt;&gt; to be our UTXO and get its &lt;&lt;glossary:output index&gt;&gt; number (vout) and &lt;&lt;glossary:pubkey script&gt;&gt; (scriptPubKey).</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> getrawtransaction <span class=\"cm-def\">$UTXO_TXID</span> <span class=\"cm-number\">1</span></span>\n</code></pre>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"010000000130d100f7762956100a2396403c60e13e7a13520167acc6d38978ec\\</span>\n          <span class=\"cm-string\">33ada44cf8010000006b48304502210084effe3132550e6ba43a7f4cc54ad30d\\</span>\n          <span class=\"cm-string\">001c0dbc3ea66d638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb\\</span>\n          <span class=\"cm-string\">2a30b0112969717e469a722bca0263e0975d01210324c2226564b19f0948306b\\</span>\n          <span class=\"cm-string\">b7160a735c28001bbd046cd46059df9f8434f41254feffffff0200ca9a3b0000\\</span>\n          <span class=\"cm-string\">000017a9144f334f26e350c8903c92ff25b733670902cfad5a8700e0052d0b00\\</span>\n          <span class=\"cm-string\">00001976a91479165c2155b8fec5c702ec7f251d0982f27b402988ac67000000\"</span>,\n  <span class=\"cm-string\">\"txid\"</span>: <span class=\"cm-string\">\"ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52\"</span>,\n  <span class=\"cm-string\">\"size\"</span>: <span class=\"cm-number\">224</span>,\n  <span class=\"cm-string\">\"version\"</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-string\">\"locktime\"</span>: <span class=\"cm-number\">103</span>,\n  <span class=\"cm-string\">\"vin\"</span>: [\n    {\n      <span class=\"cm-string\">\"txid\"</span>: <span class=\"cm-string\">\"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f70\\</span>\n                <span class=\"cm-string\">0d130\"</span>,\n      <span class=\"cm-string\">\"vout\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-string\">\"scriptSig\"</span>: {\n        <span class=\"cm-string\">\"asm\"</span>: <span class=\"cm-string\">\"304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d63\\</span>\n                <span class=\"cm-string\">8e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b01129\\</span>\n                <span class=\"cm-string\">69717e469a722bca0263e0975d[ALL] 0324c2226564b19f0948306bb7\\</span>\n                <span class=\"cm-string\">160a735c28001bbd046cd46059df9f8434f41254\"</span>,\n        <span class=\"cm-string\">\"hex\"</span>: <span class=\"cm-string\">\"48304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d\\</span>\n                <span class=\"cm-string\">638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b011\\</span>\n                <span class=\"cm-string\">2969717e469a722bca0263e0975d01210324c2226564b19f0948306bb7\\</span>\n                <span class=\"cm-string\">160a735c28001bbd046cd46059df9f8434f41254\"</span>\n      },\n      <span class=\"cm-string\">\"sequence\"</span>: <span class=\"cm-number\">4294967294</span>\n    }\n  ],\n  <span class=\"cm-string\">\"vout\"</span>: [\n    {\n      <span class=\"cm-property\">\"value\"</span>: <span class=\"cm-number\">10.00000000</span>,\n      <span class=\"cm-property\">\"valueSat\"</span>: <span class=\"cm-number\">1000000000</span>,\n      <span class=\"cm-property\">\"n\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"scriptPubKey\"</span>: {\n        <span class=\"cm-property\">\"asm\"</span>: <span class=\"cm-string\">\"OP_HASH160 4f334f26e350c8903c92ff25b733670902cfad5a OP_EQUAL\"</span>,\n        <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"a9144f334f26e350c8903c92ff25b733670902cfad5a87\"</span>,\n        <span class=\"cm-property\">\"reqSigs\"</span>: <span class=\"cm-number\">1</span>,\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"scripthash\"</span>,\n        <span class=\"cm-property\">\"addresses\"</span>: [\n          <span class=\"cm-string\">\"8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\"</span>\n        ]\n      }\n    },\n    {\n      <span class=\"cm-property\">\"value\"</span>: <span class=\"cm-number\">480.00000000</span>,\n      <span class=\"cm-property\">\"valueSat\"</span>: <span class=\"cm-number\">48000000000</span>,\n      <span class=\"cm-property\">\"n\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-property\">\"scriptPubKey\"</span>: {\n        <span class=\"cm-property\">\"asm\"</span>: <span class=\"cm-string\">\"OP_DUP OP_HASH160 79165c2155b8fec5c702ec7f251d0982f27b4029\\</span>\n                <span class=\"cm-string\">OP_EQUALVERIFY OP_CHECKSIG\"</span>,\n        <span class=\"cm-string\">\"hex\"</span>: <span class=\"cm-string\">\"76a91479165c2155b8fec5c702ec7f251d0982f27b402988ac\"</span>,\n        <span class=\"cm-string\">\"reqSigs\"</span>: <span class=\"cm-number\">1</span>,\n        <span class=\"cm-string\">\"type\"</span>: <span class=\"cm-string\">\"pubkeyhash\"</span>,\n        <span class=\"cm-string\">\"addresses\"</span>: [\n          <span class=\"cm-string\">\"yXMhQ1L5q3PcnJgEhyAFztQPPRaEr8Mh8s\"</span>\n        ]\n      }\n    }\n  ]\n}</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">UTXO_VOUT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">0</span>\n&gt; <span class=\"cm-def\">UTXO_OUTPUT_SCRIPT</span><span class=\"cm-operator\">=</span>a9144f334f26e350c8903c92ff25b733670902cfad5a87</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-6-get-new-address\"></div>6. Get new address<a class=\"fa fa-anchor\" href=\"#section-6-get-new-address\"></a></h1>\n<p>We generate a new P2PKH address to use in the output we&#39;re about to create.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> getnewaddress\nyZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr\n\n&gt; <span class=\"cm-def\">NEW_ADDRESS4</span><span class=\"cm-operator\">=</span>yZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-7-create-raw-transaction\"></div>7. Create raw transaction<a class=\"fa fa-anchor\" href=\"#section-7-create-raw-transaction\"></a></h1>\n<p>We generate the &lt;&lt;glossary:raw transaction&gt;&gt; the same way we did in the <a href=\"core-examples-transaction-tutorial-simple-raw-transaction\">Simple Raw Transaction subsection</a>.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'><span class=\"cm-comment\">## Outputs - inputs = transaction fee, so always double-check your math!</span>\n&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> createrawtransaction <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      {</span>\n<span class=\"cm-string\">        \"txid\": \"'</span><span class=\"cm-def\">$UTXO_TXID</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">        \"vout\": '</span><span class=\"cm-def\">$UTXO_VOUT</span><span class=\"cm-string\">'</span>\n<span class=\"cm-string\">      }</span>\n<span class=\"cm-string\">   ]</span>\n<span class=\"cm-string\">   '''</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">   {</span>\n<span class=\"cm-string\">     \"'</span><span class=\"cm-def\">$NEW_ADDRESS4</span><span class=\"cm-string\">'\": 9.998</span>\n<span class=\"cm-string\">   }'''</span>\n\n0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n24eba2b2dd0000000000ffffffff01c0bc973b000000001976a914900504f96c\\\n55d6ebe1c33581ba9430ca05b12a1488ac00000000\n\n010000000175e1769813db8418fea17576694af1ff31cb2b512b7333e6eb42f0\\\n30d0d778720000000000ffffffff01c0bc973b000000001976a914b6f64f5bf3\\\ne38f25ead28817df7929c06fe847ee88ac00000000\n\n&gt; <span class=\"cm-def\">RAW_TX</span><span class=\"cm-operator\">=</span>0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-8-get-private-key\"></div>8. Get private key<a class=\"fa fa-anchor\" href=\"#section-8-get-private-key\"></a></h1>\n<p>We get the &lt;&lt;glossary:private keys&gt;&gt; for two of the &lt;&lt;glossary:public keys&gt;&gt; we used to create the transaction, the same way we got private keys in the <a href=\"/docs/core-examples-transaction-tutorial-complex-raw-transaction\">Complex Raw Transaction subsection</a>. Recall that we created a 2-of-3 multisig pubkey script, so signatures from two private keys are needed.</p>\n\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Private Key Warning\n\t</h3>\n\t<div class=\"callout-body\"><p><strong>Reminder:</strong> Users should never manually manage private keys on mainnet. See the warning in the <a href=\"core-examples-transaction-tutorial-complex-raw-transaction\">complex raw transaction section</a>.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> dumpprivkey <span class=\"cm-def\">$NEW_ADDRESS1</span>\ncThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQaTK2zVp7sVrHdmv\n&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> dumpprivkey <span class=\"cm-def\">$NEW_ADDRESS3</span>\ncUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTPJDiBDu8dRD3EjzF\n\n&gt; <span class=\"cm-def\">NEW_ADDRESS1_PRIVATE_KEY</span><span class=\"cm-operator\">=</span>cThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQ[...]\n&gt; <span class=\"cm-def\">NEW_ADDRESS3_PRIVATE_KEY</span><span class=\"cm-operator\">=</span>cUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTP[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-9-sign-raw-transaction\"></div>9. Sign raw transaction<a class=\"fa fa-anchor\" href=\"#section-9-sign-raw-transaction\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-9-a-private-key-1\"></div>9a. Private Key 1<a class=\"fa fa-anchor\" href=\"#section-9-a-private-key-1\"></a></h2>\n<p>We make the first &lt;&lt;glossary:signature&gt;&gt;. The input argument (JSON object) takes the additional &lt;&lt;glossary:redeem script&gt;&gt; parameter so that it can append the redeem script to the &lt;&lt;glossary:signature script&gt;&gt; after the two signatures.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> signrawtransaction <span class=\"cm-def\">$RAW_TX</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      {</span>\n<span class=\"cm-string\">        \"txid\": \"'</span><span class=\"cm-def\">$UTXO_TXID</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">        \"vout\": '</span><span class=\"cm-def\">$UTXO_VOUT</span><span class=\"cm-string\">',</span>\n<span class=\"cm-string\">        \"scriptPubKey\": \"'</span><span class=\"cm-def\">$UTXO_OUTPUT_SCRIPT</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">        \"redeemScript\": \"'</span><span class=\"cm-def\">$P2SH_REDEEM_SCRIPT</span><span class=\"cm-string\">'\"</span>\n<span class=\"cm-string\">      }</span>\n<span class=\"cm-string\">    ]</span>\n<span class=\"cm-string\">    '''</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS1_PRIVATE_KEY</span><span class=\"cm-string\">'\"</span>\n<span class=\"cm-string\">    ]'''</span></span>\n</code></pre>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\</span>\n          <span class=\"cm-string\">24eba2b2dd00000000b40047304402201cc50eac6d2db04dabd8ccd68b3116c0\\</span>\n          <span class=\"cm-string\">a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\</span>\n          <span class=\"cm-string\">f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866cccae3c975\\</span>\n          <span class=\"cm-string\">a72884443a351801a0ea9721cbe7215586ddd6fab5f39f262103b2259f42a241\\</span>\n          <span class=\"cm-string\">f4870e794521594f2af7aadf0e4c580a43582e58630e4618634621038007ef6f\\</span>\n          <span class=\"cm-string\">d812d73da054271b68a42dae06672cff2a30b2814935537e5930ebf653aeffff\\</span>\n          <span class=\"cm-string\">ffff01c0bc973b000000001976a914900504f96c55d6ebe1c33581ba9430ca05\\</span>\n          <span class=\"cm-string\">b12a1488ac00000000\"</span>,\n  <span class=\"cm-string\">\"complete\"</span>: <span class=\"cm-atom\">false</span>,\n  <span class=\"cm-string\">\"errors\"</span>: [\n    {\n      <span class=\"cm-string\">\"txid\"</span>: <span class=\"cm-string\">\"ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779\\</span>\n                <span class=\"cm-string\">f9c52\"</span>,\n      <span class=\"cm-string\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-string\">\"scriptSig\"</span>: <span class=\"cm-string\">\"0047304402201cc50eac6d2db04dabd8ccd68b3116c0a8d37e7e41\\</span>\n                    <span class=\"cm-string\">335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\</span>\n                    <span class=\"cm-string\">f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866\\</span>\n                    <span class=\"cm-string\">cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5f3\\</span>\n                    <span class=\"cm-string\">9f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43\\</span>\n                    <span class=\"cm-string\">582e58630e4618634621038007ef6fd812d73da054271b68a42dae\\</span>\n                    <span class=\"cm-string\">06672cff2a30b2814935537e5930ebf653ae\"</span>,\n      <span class=\"cm-string\">\"sequence\"</span>: <span class=\"cm-number\">4294967295</span>,\n      <span class=\"cm-string\">\"error\"</span>: <span class=\"cm-string\">\"Operation not valid with the current stack size\"</span>\n    }\n  ]\n}</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">PARTLY_SIGNED_RAW_TX</span><span class=\"cm-operator\">=</span>010000000175e1769813db8418fea17576694af1f[...]</span>\n</code></pre>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-9-b-private-key-3\"></div>9b. Private Key 3<a class=\"fa fa-anchor\" href=\"#section-9-b-private-key-3\"></a></h2>\n<p>The <code>signrawtransaction</code> call used here is nearly identical to the one used above.  The only difference is the private key used.  Now that the two required signatures have been provided, the transaction is marked as complete.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> signrawtransaction <span class=\"cm-def\">$PARTLY_SIGNED_RAW_TX</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      {</span>\n<span class=\"cm-string\">        \"txid\": \"'</span><span class=\"cm-def\">$UTXO_TXID</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">        \"vout\": '</span><span class=\"cm-def\">$UTXO_VOUT</span><span class=\"cm-string\">',</span>\n<span class=\"cm-string\">        \"scriptPubKey\": \"'</span><span class=\"cm-def\">$UTXO_OUTPUT_SCRIPT</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">        \"redeemScript\": \"'</span><span class=\"cm-def\">$P2SH_REDEEM_SCRIPT</span><span class=\"cm-string\">'\"</span>\n<span class=\"cm-string\">      }</span>\n<span class=\"cm-string\">    ]</span>\n<span class=\"cm-string\">    '''</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS3_PRIVATE_KEY</span><span class=\"cm-string\">'\"</span>\n<span class=\"cm-string\">    ]'''</span></span>\n</code></pre>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\</span>\n          <span class=\"cm-string\">24eba2b2dd00000000fdfd000047304402201cc50eac6d2db04dabd8ccd68b31\\</span>\n          <span class=\"cm-string\">16c0a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01\\</span>\n          <span class=\"cm-string\">556ff2ff9c48c39ff434fdfb1d9e0284fbde770101483045022100e0e1f95f1a\\</span>\n          <span class=\"cm-string\">b85814ee0920d5bd28c6831086e838af4bec344fd8654a0b58525f022075989f\\</span>\n          <span class=\"cm-string\">d3a677e1522aa85d45c41720aec9e7c127acadb6c14338c3b1a768ab28014c69\\</span>\n          <span class=\"cm-string\">522103fa8866cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5\\</span>\n          <span class=\"cm-string\">f39f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43582e5863\\</span>\n          <span class=\"cm-string\">0e4618634621038007ef6fd812d73da054271b68a42dae06672cff2a30b28149\\</span>\n          <span class=\"cm-string\">35537e5930ebf653aeffffffff01c0bc973b000000001976a914900504f96c55\\</span>\n          <span class=\"cm-string\">d6ebe1c33581ba9430ca05b12a1488ac00000000\"</span>,\n  <span class=\"cm-string\">\"complete\"</span>: <span class=\"cm-atom\">true</span>\n}</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">SIGNED_RAW_TX</span><span class=\"cm-operator\">=</span>0100000001529c9f774521b7f5104b709e899d8547078ca4[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-10-send-raw-transaction\"></div>10. Send raw transaction<a class=\"fa fa-anchor\" href=\"#section-10-send-raw-transaction\"></a></h1>\n<p>We send the transaction spending the P2SH multisig output to the local &lt;&lt;glossary:node&gt;&gt;, which accepts it.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> sendrawtransaction <span class=\"cm-def\">$SIGNED_RAW_TX</span>\n483061b32894aacf6c4050291252a480c2a4c869eb85bd45082fb87d6b175ae8</span>\n</code></pre>\n\n</div>"
}