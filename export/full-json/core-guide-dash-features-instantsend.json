{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Chainlocks",
    "slug": "core-guide-dash-features-chainlocks",
    "category": "Core Guides"
   }
  ]
 },
 "title": "Instantsend",
 "updates": [],
 "type": "basic",
 "slug": "core-guide-dash-features-instantsend",
 "excerpt": "",
 "body": "Dash Core's <<glossary:InstantSend>> feature provides a way to lock transaction <<glossary:inputs>> and enable secure, instantaneous <<glossary:transactions>>. The <<glossary:network>> automatically attempts to upgrade any qualifying transaction to InstantSend without a need for the sending <<glossary:wallet>> to explicitly request it.\n\n* To qualify for InstantSend, each transaction input must meet at least one of the following criteria:\n  * Be locked by InstantSend\n  * Be in a block that has a <<glossary:ChainLock>>\n  * Have at least the number <<glossary:confirmations>> (block depth) indicated by the table below\n\n| **Network** | **Confirmations Required** |\n| --- | --- |\n| Mainnet | 6 Blocks (normal transactions)<br>**100 Blocks (mining/masternode rewards)** |\n| Testnet / Regtest / Devnet | 2 Blocks |\n\nThe introduction of the <<glossary:Long-Living Masternode Quorum>> feature in Dash Core 0.14 provided a foundation to scale InstantSend. The transaction input locking process (and resulting network traffic) now occurs only within the quorum. This minimizes network congestion since only the [`islock` message](core-ref-p2p-network-instantsend-messages#islock) produced by the locking process is relayed to the entire Dash network. This message contains all the information necessary to verify a successful transaction lock.\n\nSporks 2 (`SPORK_2_INSTANTSEND_ENABLED`) and 20 (`SPORK_20_INSTANTSEND_LLMQ_BASED`) are used to manage InstantSend. <<glossary:Spork>> 2 enables or disables the entire InstantSend feature. Spork 20 was used to support the transition to LLMQ-based InstantSend and is currently retained for backward compatibility. It will be deprecated in a future release.\n\nNote: A transaction will __not__ be included in the block template (from the [`getblocktemplate` RPC](core-api-ref-remote-procedure-calls-mining#getblocktemplate)) unless it:\n\n 1. Has been locked, or \n 2. Has been in the mempool for >=10 minutes (`WAIT_FOR_ISLOCK_TIMEOUT`)\n\nA <<glossary:miner>> may still include any transaction, but <<glossary:blocks>> containing only locked transactions (or ones older than the timeout) should achieve a ChainLock faster. This is desirable to miners since it prevents any reorgs that might orphan their block.\n\n## *InstantSend Data Flow*\n\n| **InstantSend Client** | **Direction**  | **Peers**   | **Description** |\n| --- | :---: | --- | --- |\n| [`tx` message](core-ref-p2p-network-data-messages#tx)                | \u2192 |                         | Client sends InstantSend transaction\n| **LLMQ Signing Sessions**   |   |                         | Quorums internally process locking |\n|                             |   |                         | Quorum(s) responsible for the transaction's inputs lock the inputs via LLMQ signing sessions\n|                             |   |                         | Once all inputs are locked, the quorum responsible for the overall transaction creates the transaction lock (`islock`) via an LLMQ signing session\n| **LLMQ Results**             |   |                         | Quorum results broadcast to the network |\n|                             | \u2190 | [`inv` message](core-ref-p2p-network-data-messages#inv) (islock)  | Quorum responds with lock inventory\n| [`getdata` message](core-ref-p2p-network-data-messages#getdata) (islock)  | \u2192 |                         | Client requests lock message\n|                             | \u2190 | [`islock` message](core-ref-p2p-network-instantsend-messages#islock)        | Quorum responds with lock message\n\nOnce a transaction lock is approved, the `instantlock` field of various RPCs is set to `true` (e.g. the [`getmempoolentry` RPC](core-api-ref-remote-procedure-calls-blockchain#getmempoolentry)).",
 "order": 0,
 "isReference": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "createdAt": "2019-10-23T19:26:57.248Z",
 "updatedAt": "2020-05-28T20:35:01.887Z",
 "_id": "5e96055329a18c0025d39202",
 "version": "5e96055329a18c0025d39261",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5af39863989da435b05d284d",
 "parentDoc": "5e96055329a18c0025d39201",
 "category": "5e96055329a18c0025d391e3",
 "__v": 3,
 "isApi": false,
 "id": "5e96055329a18c0025d39202",
 "body_html": "<div class=\"magic-block-textarea\"><p>Dash Core&#39;s &lt;&lt;glossary:InstantSend&gt;&gt; feature provides a way to lock transaction &lt;&lt;glossary:inputs&gt;&gt; and enable secure, instantaneous &lt;&lt;glossary:transactions&gt;&gt;. The &lt;&lt;glossary:network&gt;&gt; automatically attempts to upgrade any qualifying transaction to InstantSend without a need for the sending &lt;&lt;glossary:wallet&gt;&gt; to explicitly request it.</p>\n<ul>\n<li >To qualify for InstantSend, each transaction input must meet at least one of the following criteria:<ul>\n<li >Be locked by InstantSend</li><li >Be in a block that has a &lt;&lt;glossary:ChainLock&gt;&gt;</li><li >Have at least the number &lt;&lt;glossary:confirmations&gt;&gt; (block depth) indicated by the table below</li></ul>\n</li></ul>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th><strong>Network</strong></th>\n<th><strong>Confirmations Required</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mainnet</td>\n<td>6 Blocks (normal transactions)<br><strong>100 Blocks (mining/masternode rewards)</strong></td>\n</tr>\n<tr>\n<td>Testnet / Regtest / Devnet</td>\n<td>2 Blocks</td>\n</tr>\n</tbody>\n</table></div>\n<p>The introduction of the &lt;&lt;glossary:Long-Living Masternode Quorum&gt;&gt; feature in Dash Core 0.14 provided a foundation to scale InstantSend. The transaction input locking process (and resulting network traffic) now occurs only within the quorum. This minimizes network congestion since only the <a href=\"core-ref-p2p-network-instantsend-messages#islock\"><code>islock</code> message</a> produced by the locking process is relayed to the entire Dash network. This message contains all the information necessary to verify a successful transaction lock.</p>\n<p>Sporks 2 (<code>SPORK_2_INSTANTSEND_ENABLED</code>) and 20 (<code>SPORK_20_INSTANTSEND_LLMQ_BASED</code>) are used to manage InstantSend. &lt;&lt;glossary:Spork&gt;&gt; 2 enables or disables the entire InstantSend feature. Spork 20 was used to support the transition to LLMQ-based InstantSend and is currently retained for backward compatibility. It will be deprecated in a future release.</p>\n<p>Note: A transaction will <strong>not</strong> be included in the block template (from the <a href=\"core-api-ref-remote-procedure-calls-mining#getblocktemplate\"><code>getblocktemplate</code> RPC</a>) unless it:</p>\n<ol>\n<li  value=\"1\">Has been locked, or </li><li  value=\"2\">Has been in the mempool for &gt;=10 minutes (<code>WAIT_FOR_ISLOCK_TIMEOUT</code>)</li></ol>\n<p>A &lt;&lt;glossary:miner&gt;&gt; may still include any transaction, but &lt;&lt;glossary:blocks&gt;&gt; containing only locked transactions (or ones older than the timeout) should achieve a ChainLock faster. This is desirable to miners since it prevents any reorgs that might orphan their block.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-instant-send-data-flow\"></div><em>InstantSend Data Flow</em><a class=\"fa fa-anchor\" href=\"#section-instant-send-data-flow\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th><strong>InstantSend Client</strong></th>\n<th style=\"text-align:center\"><strong>Direction</strong></th>\n<th><strong>Peers</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> message</a></td>\n<td style=\"text-align:center\">\u2192</td>\n<td></td>\n<td>Client sends InstantSend transaction</td>\n</tr>\n<tr>\n<td><strong>LLMQ Signing Sessions</strong></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Quorums internally process locking</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Quorum(s) responsible for the transaction&#39;s inputs lock the inputs via LLMQ signing sessions</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Once all inputs are locked, the quorum responsible for the overall transaction creates the transaction lock (<code>islock</code>) via an LLMQ signing session</td>\n</tr>\n<tr>\n<td><strong>LLMQ Results</strong></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>Quorum results broadcast to the network</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">\u2190</td>\n<td><a href=\"core-ref-p2p-network-data-messages#inv\"><code>inv</code> message</a> (islock)</td>\n<td>Quorum responds with lock inventory</td>\n</tr>\n<tr>\n<td><a href=\"core-ref-p2p-network-data-messages#getdata\"><code>getdata</code> message</a> (islock)</td>\n<td style=\"text-align:center\">\u2192</td>\n<td></td>\n<td>Client requests lock message</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">\u2190</td>\n<td><a href=\"core-ref-p2p-network-instantsend-messages#islock\"><code>islock</code> message</a></td>\n<td>Quorum responds with lock message</td>\n</tr>\n</tbody>\n</table></div>\n<p>Once a transaction lock is approved, the <code>instantlock</code> field of various RPCs is set to <code>true</code> (e.g. the <a href=\"core-api-ref-remote-procedure-calls-blockchain#getmempoolentry\"><code>getmempoolentry</code> RPC</a>).</p>\n\n</div>"
}