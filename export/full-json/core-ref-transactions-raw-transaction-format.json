{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Special Transactions",
    "slug": "core-ref-transactions-special-transactions",
    "category": "Core Reference"
   }
  ]
 },
 "title": "Raw Transaction Format",
 "updates": [],
 "type": "basic",
 "slug": "core-ref-transactions-raw-transaction-format",
 "excerpt": "",
 "body": "Dash transactions are broadcast between <<glossary:peers>> in a serialized byte format, called <<glossary:raw format>>. It is this form of a transaction which is SHA256(SHA256()) hashed to create the <<glossary:TXID>> and, ultimately, the <<glossary:merkle root>> of a <<glossary:block>> containing the transaction---making the transaction format part of the <<glossary:consensus rules>>.\n\nDash Core and many other tools print and accept <<glossary:raw transactions>> encoded as hex.\n\nTransactions prior to protocol version 70209 defaulted to version 1. Transaction version 2 was the default in protocol versions => 70209 and < 70213. Version 2 transactions have the same format, but the `lock_time` parameter was redefined by [BIP68](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki) to enable relative lock-times. (Note: transactions in the <<glossary:block chain>> are allowed to list a higher version number to permit <<glossary:soft forks>>, but they are treated as version 2 transactions by current software.)\n\nDash Core 0.13.0 (protocol version 70213) introduced transaction version 3 as part of the [DIP2 - Special Transactions](https://github.com/dashpay/dips/blob/master/dip-0002.md) implementation. Details of the changes introduced by this feature and currently implemented <<glossary:special transactions>> can be found in the [Special Transactions section](core-ref-transactions-special-transactions) below as well as in the [DIP](https://github.com/dashpay/dips/blob/master/dip-0002.md).\n\nA raw transaction has the following top-level format:\n\n| Bytes    | Name         | Data Type           | Description\n|----------|--------------|---------------------|-------------\n| 2        | version      | uint16_t            | *Converted from 4 bytes to 2 bytes by DIP2 in v0.13.0*<br><br>Transaction version number; currently version 3.  Programs creating transactions using newer consensus rules may use higher version numbers.\n| 2        | type         | uint16_t            | *Added by DIP2 in v0.13.0. Uses 2 bytes that were previously part of `version`*<br><br>Transaction type number; 0 for classical transactions; Non-zero for DIP2 special transactions.\n| *Varies* | tx_in count  | compactSize uint    | Number of inputs in this transaction.\n| *Varies* | tx_in        | txIn                | Transaction inputs.  See description of txIn below.\n| *Varies* | tx_out count | compactSize uint    | Number of outputs in this transaction.\n| *Varies* | tx_out       | txOut               | Transaction outputs.  See description of txOut below.\n| 4        | lock_time    | uint32_t            | A time (Unix epoch time) or block number.  See the [locktime parsing rules](core-guide-transactions-locktime-and-sequence-number).\n| *Varies* | extra_payload size | compactSize uint | *Added by DIP2 in v0.13.0*<br><br>Variable number of bytes of extra payload for DIP2-based special transactions\n| *Varies* | extra_payload | blob               | *Added by DIP2 in v0.13.0*<br><br>Special transaction payload.\n\nA transaction may have multiple <<glossary:inputs>> and <<glossary:outputs>>, so the txIn and txOut structures may recur within a transaction. <<glossary:CompactSize unsigned integers>> are a form of variable-length integers; they are described in the [CompactSize section](core-ref-transactions-compactsize-unsigned-integers).\n\n# JSON-RPC Responses\n\nWhen retrieving transaction data via Dash Core RPCs (e.g. the [`getrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction)), the transaction data is returned in the following format.\n\nVersion 1 and 2 Transaction Structure (prior to DIP2 activation in Dash Core v0.13.0):\n``` json\n{\n  \"txid\": <string>,\n  \"size\": <int>,\n  \"version\": 2,\n  \"locktime\": 0,\n  \"vin\": [ ],\n  \"vout\": [ ]\n}\n```\n\nVersion 3 Transaction Structure (Dash Core v0.13.0+ and activated [DIP2](https://github.com/dashpay/dips/blob/master/dip-0002.md)):\n``` json\n{\n  \"txid\": <string>,\n  \"size\": <int>,\n  \"version\": 3,\n  \"type\": <int>,\n  \"locktime\": 0,\n  \"vin\": [ ],\n  \"vout\": [ ],\n  \"extraPayloadSize\": <variable int>,\n  \"extraPayload\": \u2026\n}\n```\n\nFor <<glossary:special transactions>> (those using the extraPayload fields), JSON-RPC responses contain a parsed JSON representation of the Transaction Payload.\n\nThe sample transaction below shows the response for a quorum commitment special transaction:\n\n``` json\n{\n  \"txid\": \"592a09d08348d970b4d9ba216246a23dac866717b460d3f369a86293b9839eea\",\n  \"size\": 342,\n  \"version\": 3,\n  \"type\": 6,\n  \"locktime\": 0,\n  \"vin\": [\n  ],\n  \"vout\": [\n  ],\n  \"extraPayloadSize\": 329,\n  \"extraPayload\": \"0100841b0000010001211cd3e4230b2bc47530e200447e998a38e960d4ed5f5251e26892130cn  \"qcTx\": {\n    \"version\": 1,\n    \"height\": 7044,\n    \"commitment\": {\n      \"version\": 1,\n      \"llmqType\": 1,\n      \"quorumHash\": \"0000000c139268e251525fedd460e9388a997e4400e23075c42b0b23e4d31c21\",\n      \"signersCount\": 0,\n      \"validMembersCount\": 0,\n      \"quorumPublicKey\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  \"instantlock\": false\n}\n```\n\n**<span id=\"txin\"></span>**\n# TxIn: A Transaction Input (Non-Coinbase)\n\nEach non- <<glossary:coinbase>> <<glossary:input>> spends an outpoint from a previous transaction. (Coinbase inputs are described separately after the example section below.)\n\n| Bytes    | Name             | Data Type            | Description\n|----------|------------------|----------------------|--------------\n| 36       | previous_output  | <<glossary:outpoint>>             | The previous outpoint being spent.  See description of outpoint below.\n| *Varies* | script bytes     | compactSize uint     | The number of bytes in the signature script.  Maximum is 10,000 bytes.\n| *Varies* | signature script | char[]               | A script-language script which satisfies the conditions placed in the outpoint's pubkey script.  Should only contain data pushes; see the [signature script modification warning](core-ref-transactions-opcodes#signature_script_modification_warning).\n| 4        | sequence         | uint32_t             | Sequence number.  Default for Dash Core and almost all other programs is 0xffffffff.\n\n**<span id=\"outpoint\"></span>**\n# Outpoint: The Specific Part Of A Specific Output\n\nBecause a single transaction can include multiple <<glossary:outputs>>, the <<glossary:outpoint>> structure includes both a <<glossary:TXID>> and an output index number to refer to specific output.\n\n| Bytes | Name  | Data Type | Description\n|-------|-------|-----------|--------------\n| 32    | hash  | char[32]  | The TXID of the transaction holding the output to spend.  The TXID is a hash provided here in internal byte order.\n| 4     | index | uint32_t  | The output index number of the specific output to spend from the transaction. The first output is 0x00000000.\n\n**<span id=\"txout\"></span>**\n# TxOut: A Transaction Output\n\nEach <<glossary:output>> spends a certain number of <<glossary:duffs>>, placing them under control of anyone who can satisfy the provided <<glossary:pubkey script>>.\n\n| Bytes    | Name            | Data Type        | Description\n|----------|-----------------|------------------|--------------\n| 8        | value           | int64_t          | Number of duffs to spend.  May be zero; the sum of all outputs may not exceed the sum of duffs previously spent to the outpoints provided in the input section.  (Exception: coinbase transactions spend the block subsidy and collected transaction fees.)\n| 1+       | pk_script bytes | compactSize uint | Number of bytes in the pubkey script.  Maximum is 10,000 bytes.\n| *Varies* | pk_script       | char[]           | Defines the conditions which must be satisfied to spend this output.\n\n**Example**\n\nThe sample raw transaction itemized below is the one created in the [Simple Raw Transaction section](core-examples-transaction-tutorial#simple-raw-transaction) of the Developer Examples. It spends a previous pay-to-pubkey output by paying to a new pay-to-pubkey-hash (P2PKH) output.\n\n``` text\n01000000 ................................... Version\n\n01 ......................................... Number of inputs\n|\n| 7b1eabe0209b1fe794124575ef807057\n| c77ada2138ae4fa8d6c4de0398a14f3f ......... Outpoint TXID\n| 00000000 ................................. Outpoint index number: 0\n|\n| 49 ....................................... Bytes in sig. script: 73\n| | 48 ..................................... Push 72 bytes as data\n| | | 30450221008949f0cb400094ad2b5eb3\n| | | 99d59d01c14d73d8fe6e96df1a7150de\n| | | b388ab8935022079656090d7f6bac4c9\n| | | a94e0aad311a4268e082a725f8aeae05\n| | | 73fb12ff866a5f01 ..................... Secp256k1 signature\n|\n| ffffffff ................................. Sequence number: UINT32_MAX\n\n01 ......................................... Number of outputs\n| f0ca052a01000000 ......................... Duffs (49.99990000 Dash)\n|\n| 19 ....................................... Bytes in pubkey script: 25\n| | 76 ..................................... OP_DUP\n| | a9 ..................................... OP_HASH160\n| | 14 ..................................... Push 20 bytes as data\n| | | cbc20a7664f2f69e5355aa427045bc15\n| | | e7c6c772 ............................. PubKey hash\n| | 88 ..................................... OP_EQUALVERIFY\n| | ac ..................................... OP_CHECKSIG\n\n00000000 ................................... locktime: 0 (a block height)\n```\n\n**<span id=\"coinbase\"></span>**\n# Coinbase Input: The Input Of The First Transaction In A Block\n\nThe first transaction in a <<glossary:block>>, called the <<glossary:coinbase transaction>>, must have exactly one input, called a <<glossary:coinbase>>. The coinbase <<glossary:input>> currently has the following format.\n\n| Bytes    | Name               | Data Type            | Description\n|----------|--------------------|----------------------|--------------\n| 32       | hash (null)        | char[32]             | A 32-byte null, as a coinbase has no previous outpoint.\n| 4        | index (UINT32_MAX) | uint32_t             | 0xffffffff, as a coinbase has no previous outpoint.\n| *Varies* | script bytes       | compactSize uint     | The number of bytes in the coinbase script, up to a maximum of 100 bytes.\n| *Varies* (4) | height         | script               | The <<glossary:block height>> of this block as required by BIP34.  Uses script language: starts with a data-pushing opcode that indicates how many bytes to push to the stack followed by the block height as a little-endian unsigned integer.  This script must be as short as possible, otherwise it may be rejected.<br><br>  The data-pushing opcode will be 0x03 and the total size four bytes until block 16,777,216 about 300 years from now.\n| *Varies* | coinbase script    | *None*               | The <<glossary:coinbase field>>: Arbitrary data not exceeding 100 bytes minus the (4) height bytes.  Miners commonly place an extra nonce in this field to update the block header merkle root during hashing.\n| 4        | sequence           | uint32_t             | Sequence number.\n\nAlthough the coinbase script is arbitrary data, if it includes the bytes used by any signature-checking operations such as [`OP_CHECKSIG`](core-ref-transactions-opcodes#op_checksig), those signature checks will be counted as signature operations (sigops) towards the block's sigop limit.  To avoid this, you can prefix all data with the appropriate push operation.\n\nAn itemized <<glossary:coinbase transaction>>:\n\n``` text\n01000000 .............................. Version\n\n01 .................................... Number of inputs\n| 00000000000000000000000000000000\n| 00000000000000000000000000000000 ...  Previous outpoint TXID\n| ffffffff ............................ Previous outpoint index\n|\n| 18 .................................. Bytes in coinbase: 24\n| |\n| | 03 ................................ Bytes in height\n| | | b8240b .......................... Height: 730296\n| |\n| | 03b8240b049d29aa59080400077efa95\n| | 0000052f6d70682f .................. Arbitrary data\n| 00000000 ............................ Sequence\n\n02 .................................... Output count\n| Transaction Output 1\n| | f20cbe0a00000000 .................... Duffs (1.80227314 Dash)\n| | 1976a9142cd46be3ceeacca983e0fea3\n| | b88f26b08a26c29b88ac ................ P2PKH script\n|\n| Transaction Output 2\n| | eb0cbe0a00000000 .................... Duffs (1.80227307 Dash)\n| | 1976a914868180414905937a68fadeb0\n| | f33e64d102c9591a88ac ................ P2PKH script\n|\n| 00000000 ............................ Locktime\n```\n\nNote: currently the normal coinbase has 2 outputs (1 for the <<glossary:miner>> and 1 for the selected <<glossary:masternode>>). Superblocks ([superblock example](https://chainz.cryptoid.info/dash/block.dws?731104.htm)) have multiple outputs depending on the number of proposals being funded.",
 "order": 2,
 "isReference": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "createdAt": "2019-10-23T16:11:28.615Z",
 "updatedAt": "2020-05-28T17:45:09.911Z",
 "_id": "5e96055329a18c0025d391fa",
 "version": "5e96055329a18c0025d39261",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5af39863989da435b05d284d",
 "parentDoc": "5e96055329a18c0025d391f2",
 "category": "5e96055329a18c0025d391e2",
 "__v": 1,
 "isApi": false,
 "id": "5e96055329a18c0025d391fa",
 "body_html": "<div class=\"magic-block-textarea\"><p>Dash transactions are broadcast between &lt;&lt;glossary:peers&gt;&gt; in a serialized byte format, called &lt;&lt;glossary:raw format&gt;&gt;. It is this form of a transaction which is SHA256(SHA256()) hashed to create the &lt;&lt;glossary:TXID&gt;&gt; and, ultimately, the &lt;&lt;glossary:merkle root&gt;&gt; of a &lt;&lt;glossary:block&gt;&gt; containing the transaction---making the transaction format part of the &lt;&lt;glossary:consensus rules&gt;&gt;.</p>\n<p>Dash Core and many other tools print and accept &lt;&lt;glossary:raw transactions&gt;&gt; encoded as hex.</p>\n<p>Transactions prior to protocol version 70209 defaulted to version 1. Transaction version 2 was the default in protocol versions =&gt; 70209 and &lt; 70213. Version 2 transactions have the same format, but the <code>lock_time</code> parameter was redefined by <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki\">BIP68</a> to enable relative lock-times. (Note: transactions in the &lt;&lt;glossary:block chain&gt;&gt; are allowed to list a higher version number to permit &lt;&lt;glossary:soft forks&gt;&gt;, but they are treated as version 2 transactions by current software.)</p>\n<p>Dash Core 0.13.0 (protocol version 70213) introduced transaction version 3 as part of the <a href=\"https://github.com/dashpay/dips/blob/master/dip-0002.md\">DIP2 - Special Transactions</a> implementation. Details of the changes introduced by this feature and currently implemented &lt;&lt;glossary:special transactions&gt;&gt; can be found in the <a href=\"core-ref-transactions-special-transactions\">Special Transactions section</a> below as well as in the <a href=\"https://github.com/dashpay/dips/blob/master/dip-0002.md\">DIP</a>.</p>\n<p>A raw transaction has the following top-level format:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>version</td>\n<td>uint16_t</td>\n<td><em>Converted from 4 bytes to 2 bytes by DIP2 in v0.13.0</em><br><br>Transaction version number; currently version 3.  Programs creating transactions using newer consensus rules may use higher version numbers.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>type</td>\n<td>uint16_t</td>\n<td><em>Added by DIP2 in v0.13.0. Uses 2 bytes that were previously part of <code>version</code></em><br><br>Transaction type number; 0 for classical transactions; Non-zero for DIP2 special transactions.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>tx_in count</td>\n<td>compactSize uint</td>\n<td>Number of inputs in this transaction.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>tx_in</td>\n<td>txIn</td>\n<td>Transaction inputs.  See description of txIn below.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>tx_out count</td>\n<td>compactSize uint</td>\n<td>Number of outputs in this transaction.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>tx_out</td>\n<td>txOut</td>\n<td>Transaction outputs.  See description of txOut below.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>lock_time</td>\n<td>uint32_t</td>\n<td>A time (Unix epoch time) or block number.  See the <a href=\"core-guide-transactions-locktime-and-sequence-number\">locktime parsing rules</a>.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>extra_payload size</td>\n<td>compactSize uint</td>\n<td><em>Added by DIP2 in v0.13.0</em><br><br>Variable number of bytes of extra payload for DIP2-based special transactions</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>extra_payload</td>\n<td>blob</td>\n<td><em>Added by DIP2 in v0.13.0</em><br><br>Special transaction payload.</td>\n</tr>\n</tbody>\n</table></div>\n<p>A transaction may have multiple &lt;&lt;glossary:inputs&gt;&gt; and &lt;&lt;glossary:outputs&gt;&gt;, so the txIn and txOut structures may recur within a transaction. &lt;&lt;glossary:CompactSize unsigned integers&gt;&gt; are a form of variable-length integers; they are described in the <a href=\"core-ref-transactions-compactsize-unsigned-integers\">CompactSize section</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-json-rpc-responses\"></div>JSON-RPC Responses<a class=\"fa fa-anchor\" href=\"#section-json-rpc-responses\"></a></h1>\n<p>When retrieving transaction data via Dash Core RPCs (e.g. the <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction\"><code>getrawtransaction</code> RPC</a>), the transaction data is returned in the following format.</p>\n<p>Version 1 and 2 Transaction Structure (prior to DIP2 activation in Dash Core v0.13.0):</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">string</span><span class=\"cm-operator\">&gt;</span>,\n  <span class=\"cm-string\">\"size\"</span>: <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">int</span><span class=\"cm-operator\">&gt;</span>,\n  <span class=\"cm-string\">\"version\"</span>: <span class=\"cm-number\">2</span>,\n  <span class=\"cm-string\">\"locktime\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-string\">\"vin\"</span>: [ ],\n  <span class=\"cm-string\">\"vout\"</span>: [ ]\n}</span>\n</code></pre>\n<p>Version 3 Transaction Structure (Dash Core v0.13.0+ and activated <a href=\"https://github.com/dashpay/dips/blob/master/dip-0002.md\">DIP2</a>):</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">string</span><span class=\"cm-operator\">&gt;</span>,\n  <span class=\"cm-string\">\"size\"</span>: <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">int</span><span class=\"cm-operator\">&gt;</span>,\n  <span class=\"cm-string\">\"version\"</span>: <span class=\"cm-number\">3</span>,\n  <span class=\"cm-string\">\"type\"</span>: <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">int</span><span class=\"cm-operator\">&gt;</span>,\n  <span class=\"cm-string\">\"locktime\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-string\">\"vin\"</span>: [ ],\n  <span class=\"cm-string\">\"vout\"</span>: [ ],\n  <span class=\"cm-string\">\"extraPayloadSize\"</span>: <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">variable</span> <span class=\"cm-variable\">int</span><span class=\"cm-operator\">&gt;</span>,\n  <span class=\"cm-string\">\"extraPayload\"</span>: <span class=\"cm-variable\">\u2026</span>\n}</span>\n</code></pre>\n<p>For &lt;&lt;glossary:special transactions&gt;&gt; (those using the extraPayload fields), JSON-RPC responses contain a parsed JSON representation of the Transaction Payload.</p>\n<p>The sample transaction below shows the response for a quorum commitment special transaction:</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"592a09d08348d970b4d9ba216246a23dac866717b460d3f369a86293b9839eea\"</span>,\n  <span class=\"cm-property\">\"size\"</span>: <span class=\"cm-number\">342</span>,\n  <span class=\"cm-property\">\"version\"</span>: <span class=\"cm-number\">3</span>,\n  <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-number\">6</span>,\n  <span class=\"cm-property\">\"locktime\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-property\">\"vin\"</span>: [\n  ],\n  <span class=\"cm-property\">\"vout\"</span>: [\n  ],\n  <span class=\"cm-property\">\"extraPayloadSize\"</span>: <span class=\"cm-number\">329</span>,\n  <span class=\"cm-property\">\"extraPayload\"</span>: <span class=\"cm-string\">\"0100841b0000010001211cd3e4230b2bc47530e200447e998a38e960d4ed5f5251e26892130cspan>,\n  <span class=\"cm-property\">\"qcTx\"</span>: {\n    <span class=\"cm-property\">\"version\"</span>: <span class=\"cm-number\">1</span>,\n    <span class=\"cm-property\">\"height\"</span>: <span class=\"cm-number\">7044</span>,\n    <span class=\"cm-property\">\"commitment\"</span>: {\n      <span class=\"cm-property\">\"version\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-property\">\"llmqType\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-property\">\"quorumHash\"</span>: <span class=\"cm-string\">\"0000000c139268e251525fedd460e9388a997e4400e23075c42b0b23e4d31c21\"</span>,\n      <span class=\"cm-property\">\"signersCount\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"validMembersCount\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"quorumPublicKey\"</span>: <span class=\"cm-string\">\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"</span>\n    }\n  },\n  <span class=\"cm-property\">\"instantlock\"</span>: <span class=\"cm-atom\">false</span>\n}</span>\n</code></pre>\n<p><strong><span id=\"txin\"></span></strong></p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-tx-in-a-transaction-input-non-coinbase\"></div>TxIn: A Transaction Input (Non-Coinbase)<a class=\"fa fa-anchor\" href=\"#section-tx-in-a-transaction-input-non-coinbase\"></a></h1>\n<p>Each non- &lt;&lt;glossary:coinbase&gt;&gt; &lt;&lt;glossary:input&gt;&gt; spends an outpoint from a previous transaction. (Coinbase inputs are described separately after the example section below.)</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>36</td>\n<td>previous_output</td>\n<td>&lt;&lt;glossary:outpoint&gt;&gt;</td>\n<td>The previous outpoint being spent.  See description of outpoint below.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>script bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the signature script.  Maximum is 10,000 bytes.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>signature script</td>\n<td>char[]</td>\n<td>A script-language script which satisfies the conditions placed in the outpoint&#39;s pubkey script.  Should only contain data pushes; see the <a href=\"core-ref-transactions-opcodes#signature_script_modification_warning\">signature script modification warning</a>.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>sequence</td>\n<td>uint32_t</td>\n<td>Sequence number.  Default for Dash Core and almost all other programs is 0xffffffff.</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong><span id=\"outpoint\"></span></strong></p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-outpoint-the-specific-part-of-a-specific-output\"></div>Outpoint: The Specific Part Of A Specific Output<a class=\"fa fa-anchor\" href=\"#section-outpoint-the-specific-part-of-a-specific-output\"></a></h1>\n<p>Because a single transaction can include multiple &lt;&lt;glossary:outputs&gt;&gt;, the &lt;&lt;glossary:outpoint&gt;&gt; structure includes both a &lt;&lt;glossary:TXID&gt;&gt; and an output index number to refer to specific output.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32</td>\n<td>hash</td>\n<td>char[32]</td>\n<td>The TXID of the transaction holding the output to spend.  The TXID is a hash provided here in internal byte order.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>index</td>\n<td>uint32_t</td>\n<td>The output index number of the specific output to spend from the transaction. The first output is 0x00000000.</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong><span id=\"txout\"></span></strong></p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-tx-out-a-transaction-output\"></div>TxOut: A Transaction Output<a class=\"fa fa-anchor\" href=\"#section-tx-out-a-transaction-output\"></a></h1>\n<p>Each &lt;&lt;glossary:output&gt;&gt; spends a certain number of &lt;&lt;glossary:duffs&gt;&gt;, placing them under control of anyone who can satisfy the provided &lt;&lt;glossary:pubkey script&gt;&gt;.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8</td>\n<td>value</td>\n<td>int64_t</td>\n<td>Number of duffs to spend.  May be zero; the sum of all outputs may not exceed the sum of duffs previously spent to the outpoints provided in the input section.  (Exception: coinbase transactions spend the block subsidy and collected transaction fees.)</td>\n</tr>\n<tr>\n<td>1+</td>\n<td>pk_script bytes</td>\n<td>compactSize uint</td>\n<td>Number of bytes in the pubkey script.  Maximum is 10,000 bytes.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>pk_script</td>\n<td>char[]</td>\n<td>Defines the conditions which must be satisfied to spend this output.</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>Example</strong></p>\n<p>The sample raw transaction itemized below is the one created in the <a href=\"core-examples-transaction-tutorial#simple-raw-transaction\">Simple Raw Transaction section</a> of the Developer Examples. It spends a previous pay-to-pubkey output by paying to a new pay-to-pubkey-hash (P2PKH) output.</p>\n<pre><code class=\"lang-text\">01000000 ................................... Version\n\n01 ......................................... Number of inputs\n|\n| 7b1eabe0209b1fe794124575ef807057\n| c77ada2138ae4fa8d6c4de0398a14f3f ......... Outpoint TXID\n| 00000000 ................................. Outpoint index number: 0\n|\n| 49 ....................................... Bytes in sig. script: 73\n| | 48 ..................................... Push 72 bytes as data\n| | | 30450221008949f0cb400094ad2b5eb3\n| | | 99d59d01c14d73d8fe6e96df1a7150de\n| | | b388ab8935022079656090d7f6bac4c9\n| | | a94e0aad311a4268e082a725f8aeae05\n| | | 73fb12ff866a5f01 ..................... Secp256k1 signature\n|\n| ffffffff ................................. Sequence number: UINT32_MAX\n\n01 ......................................... Number of outputs\n| f0ca052a01000000 ......................... Duffs (49.99990000 Dash)\n|\n| 19 ....................................... Bytes in pubkey script: 25\n| | 76 ..................................... OP_DUP\n| | a9 ..................................... OP_HASH160\n| | 14 ..................................... Push 20 bytes as data\n| | | cbc20a7664f2f69e5355aa427045bc15\n| | | e7c6c772 ............................. PubKey hash\n| | 88 ..................................... OP_EQUALVERIFY\n| | ac ..................................... OP_CHECKSIG\n\n00000000 ................................... locktime: 0 (a block height)\n</code></pre>\n<p><strong><span id=\"coinbase\"></span></strong></p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-coinbase-input-the-input-of-the-first-transaction-in-a-block\"></div>Coinbase Input: The Input Of The First Transaction In A Block<a class=\"fa fa-anchor\" href=\"#section-coinbase-input-the-input-of-the-first-transaction-in-a-block\"></a></h1>\n<p>The first transaction in a &lt;&lt;glossary:block&gt;&gt;, called the &lt;&lt;glossary:coinbase transaction&gt;&gt;, must have exactly one input, called a &lt;&lt;glossary:coinbase&gt;&gt;. The coinbase &lt;&lt;glossary:input&gt;&gt; currently has the following format.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32</td>\n<td>hash (null)</td>\n<td>char[32]</td>\n<td>A 32-byte null, as a coinbase has no previous outpoint.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>index (UINT32_MAX)</td>\n<td>uint32_t</td>\n<td>0xffffffff, as a coinbase has no previous outpoint.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>script bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the coinbase script, up to a maximum of 100 bytes.</td>\n</tr>\n<tr>\n<td><em>Varies</em> (4)</td>\n<td>height</td>\n<td>script</td>\n<td>The &lt;&lt;glossary:block height&gt;&gt; of this block as required by BIP34.  Uses script language: starts with a data-pushing opcode that indicates how many bytes to push to the stack followed by the block height as a little-endian unsigned integer.  This script must be as short as possible, otherwise it may be rejected.<br><br>  The data-pushing opcode will be 0x03 and the total size four bytes until block 16,777,216 about 300 years from now.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>coinbase script</td>\n<td><em>None</em></td>\n<td>The &lt;&lt;glossary:coinbase field&gt;&gt;: Arbitrary data not exceeding 100 bytes minus the (4) height bytes.  Miners commonly place an extra nonce in this field to update the block header merkle root during hashing.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>sequence</td>\n<td>uint32_t</td>\n<td>Sequence number.</td>\n</tr>\n</tbody>\n</table></div>\n<p>Although the coinbase script is arbitrary data, if it includes the bytes used by any signature-checking operations such as <a href=\"core-ref-transactions-opcodes#op_checksig\"><code>OP_CHECKSIG</code></a>, those signature checks will be counted as signature operations (sigops) towards the block&#39;s sigop limit.  To avoid this, you can prefix all data with the appropriate push operation.</p>\n<p>An itemized &lt;&lt;glossary:coinbase transaction&gt;&gt;:</p>\n<pre><code class=\"lang-text\">01000000 .............................. Version\n\n01 .................................... Number of inputs\n| 00000000000000000000000000000000\n| 00000000000000000000000000000000 ...  Previous outpoint TXID\n| ffffffff ............................ Previous outpoint index\n|\n| 18 .................................. Bytes in coinbase: 24\n| |\n| | 03 ................................ Bytes in height\n| | | b8240b .......................... Height: 730296\n| |\n| | 03b8240b049d29aa59080400077efa95\n| | 0000052f6d70682f .................. Arbitrary data\n| 00000000 ............................ Sequence\n\n02 .................................... Output count\n| Transaction Output 1\n| | f20cbe0a00000000 .................... Duffs (1.80227314 Dash)\n| | 1976a9142cd46be3ceeacca983e0fea3\n| | b88f26b08a26c29b88ac ................ P2PKH script\n|\n| Transaction Output 2\n| | eb0cbe0a00000000 .................... Duffs (1.80227307 Dash)\n| | 1976a914868180414905937a68fadeb0\n| | f33e64d102c9591a88ac ................ P2PKH script\n|\n| 00000000 ............................ Locktime\n</code></pre>\n<p>Note: currently the normal coinbase has 2 outputs (1 for the &lt;&lt;glossary:miner&gt;&gt; and 1 for the selected &lt;&lt;glossary:masternode&gt;&gt;). Superblocks (<a href=\"https://chainz.cryptoid.info/dash/block.dws?731104.htm\">superblock example</a>) have multiple outputs depending on the number of proposals being funded.</p>\n\n</div>"
}