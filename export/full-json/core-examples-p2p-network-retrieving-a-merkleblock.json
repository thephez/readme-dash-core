{
 "_id": "5db1baad80dc4f02b5e4113a",
 "version": "5daf2e65f4109c0040fd51e5",
 "updatedAt": "2019-11-20T14:11:16.171Z",
 "createdAt": "2019-10-24T14:52:29.726Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "parentDoc": "5db19f9975818c0034428efb",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "5db19f199332b800310886f8",
 "__v": 1,
 "updates": [],
 "next": {
  "pages": [
   {
    "category": "Core Examples",
    "slug": "core-examples-p2p-network-parsing-a-merkleblock",
    "name": "Parsing A MerkleBlock",
    "icon": "file-text-o",
    "type": "doc"
   }
  ],
  "description": ""
 },
 "link_external": false,
 "link_url": "",
 "sync_unique": "",
 "hidden": false,
 "api": {
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "auth": "required",
  "params": [],
  "url": "",
  "method": "get"
 },
 "isReference": false,
 "order": 3,
 "body": "For the [`merkleblock` message](core-ref-p2p-network-data-messages#section-merkleblock) documentation on the reference page, an actual <<glossary:merkle block>> was retrieved from the <<glossary:network>> and manually processed.  This section walks through each step of the process, demonstrating basic network communication and merkle block processing.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"#!/usr/bin/env python\\n\\nfrom time import sleep\\nfrom hashlib import sha256\\nimport struct\\nimport sys\\n\\nnetwork_string = \\\"f9beb4d9\\\".decode(\\\"hex\\\")  # Mainnet\\n\\ndef send(msg,payload):\\n    ## Command is ASCII text, null padded to 12 bytes\\n    command = msg + ( ( 12 - len(msg) ) * \\\"\\\\00\\\" )\\n\\n    ## Payload length is a uint32_t\\n    payload_raw = payload.decode(\\\"hex\\\")\\n    payload_len = struct.pack(\\\"I\\\", len(payload_raw))\\n\\n    ## Checksum is first 4 bytes of SHA256(SHA256(<payload>))\\n    checksum = sha256(sha256(payload_raw).digest()).digest()[:4]\\n\\n    sys.stdout.write(\\n        network_string\\n        + command\\n        + payload_len\\n        + checksum\\n        + payload_raw\\n    )\\n    sys.stdout.flush()\",\n      \"language\": \"python\"\n    }\n  ]\n}\n[/block]\n\nTo connect to the P2P <<glossary:network>>, the trivial Python function above was developed to compute message headers and send payloads decoded from hex.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"## Create a version message\\nsend(\\\"version\\\",\\n      \\\"71110100\\\" # ........................ Protocol Version: 70001\\n    + \\\"0000000000000000\\\" # ................ Services: Headers Only (SPV)\\n    + \\\"c6925e5400000000\\\" # ................ Time: 1415484102\\n    + \\\"00000000000000000000000000000000\\\"\\n    + \\\"0000ffff7f000001208d\\\" # ............ Receiver IP Address/Port\\n    + \\\"00000000000000000000000000000000\\\"\\n    + \\\"0000ffff7f000001208d\\\" # ............ Sender IP Address/Port\\n    + \\\"0000000000000000\\\" # ................ Nonce (not used here)\\n    + \\\"1b\\\" # .............................. Bytes in version string\\n    + \\\"2f426974636f696e2e6f726720457861\\\"\\n    + \\\"6d706c653a302e392e332f\\\" # .......... Version string\\n    + \\\"93050500\\\" # ........................ Starting block height: 329107\\n    + \\\"00\\\" # .............................. Relay transactions: false\\n)\",\n      \"language\": \"python\"\n    }\n  ]\n}\n[/block]\n\nPeers on the network will not accept any requests until you send them a [`version` message](core-ref-p2p-network-control-messages#section-version). The receiving node will reply with their [`version` message](core-ref-p2p-network-control-messages#section-version) and a [`verack` message](core-ref-p2p-network-control-messages#section-verack).\n\n``` python\nsleep(1)\nsend(\"verack\", \"\")\n```\n\nWe're not going to validate their [`version` message](core-ref-p2p-network-control-messages#section-version) with this simple script, but we will sleep a short bit and send back our own [`verack` message](core-ref-p2p-network-control-messages#section-verack) as if we had accepted their [`version` message](core-ref-p2p-network-control-messages#section-version).\n\n``` python\nsend(\"filterload\",\n      \"02\"  # ........ Filter bytes: 2\n    + \"b50f\" # ....... Filter: 1010 1101 1111 0000\n    + \"0b000000\" # ... nHashFuncs: 11\n    + \"00000000\" # ... nTweak: 0/none\n    + \"00\" # ......... nFlags: BLOOM_UPDATE_NONE\n)\n```\n\nWe set a <<glossary:bloom filter>> with the [`filterload` message](core-ref-p2p-network-control-messages#section-filterload). This filter is described in the preceding sections.\n\n``` python\nsend(\"getdata\",\n      \"01\" # ................................. Number of inventories: 1\n    + \"03000000\" # ........................... Inventory type: filtered block\n    + \"a4deb66c0d726b0aefb03ed51be407fb\"\n    + \"ad7331c6e8f9eef231b7000000000000\" # ... Block header hash\n)\n```\n\nWe request a merkle block for transactions matching our filter, completing our script.\n\nTo run the script, we simply pipe it to the Unix [`netcat` command](https://en.wikipedia.org/wiki/Netcat) or one of its many clones, one of which is available for practically any platform. For example, with the original netcat and using hexdump (`hd`) to display the output:\n\n``` bash\n## Connect to the Bitcoin Core peer running on localhost\npython get-merkle.py | nc localhost 8333 | hd\n```\n\nPart of the response is shown in the [Parsing a MerkleBlock](core-examples-p2p-network-parsing-a-merkleblock) section.",
 "excerpt": "",
 "slug": "core-examples-p2p-network-retrieving-a-merkleblock",
 "type": "basic",
 "metadata": {
  "description": "",
  "title": "",
  "image": []
 },
 "title": "Retrieving A MerkleBlock",
 "id": "5db1baad80dc4f02b5e4113a",
 "isApi": false,
 "body_html": "<div class=\"magic-block-textarea\"><p>For the <a href=\"core-ref-p2p-network-data-messages#section-merkleblock\"><code>merkleblock</code> message</a> documentation on the reference page, an actual &lt;&lt;glossary:merkle block&gt;&gt; was retrieved from the &lt;&lt;glossary:network&gt;&gt; and manually processed.  This section walks through each step of the process, demonstrating basic network communication and merkle block processing.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Python</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(545)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-545\">#!/usr/bin/env python\n\nfrom time import sleep\nfrom hashlib import sha256\nimport struct\nimport sys\n\nnetwork_string = &quot;f9beb4d9&quot;.decode(&quot;hex&quot;)  # Mainnet\n\ndef send(msg,payload):\n    ## Command is ASCII text, null padded to 12 bytes\n    command = msg + ( ( 12 - len(msg) ) * &quot;\\00&quot; )\n\n    ## Payload length is a uint32_t\n    payload_raw = payload.decode(&quot;hex&quot;)\n    payload_len = struct.pack(&quot;I&quot;, len(payload_raw))\n\n    ## Checksum is first 4 bytes of SHA256(SHA256(&lt;payload&gt;))\n    checksum = sha256(sha256(payload_raw).digest()).digest()[:4]\n\n    sys.stdout.write(\n        network_string\n        + command\n        + payload_len\n        + checksum\n        + payload_raw\n    )\n    sys.stdout.flush()</textarea>\n\t\t\t<pre id=\"code-545\"><code><span class='cm-s-neo'><span class=\"cm-comment\">#!&#47;usr&#47;bin&#47;env python</span>\n\n<span class=\"cm-keyword\">from</span> <span class=\"cm-variable\">time</span> <span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">sleep</span>\n<span class=\"cm-keyword\">from</span> <span class=\"cm-variable\">hashlib</span> <span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">sha256</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">struct</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">sys</span>\n\n<span class=\"cm-variable\">network_string</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"f9beb4d9\"</span>.<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"hex\"</span>)  <span class=\"cm-comment\"># Mainnet</span>\n\n<span class=\"cm-keyword\">def</span> <span class=\"cm-def\">send</span>(<span class=\"cm-variable\">msg</span>,<span class=\"cm-variable\">payload</span>):\n    <span class=\"cm-comment\">## Command is ASCII text, null padded to 12 bytes</span>\n    <span class=\"cm-variable\">command</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">msg</span> <span class=\"cm-operator\">+</span> ( ( <span class=\"cm-number\">12</span> <span class=\"cm-operator\">-</span> <span class=\"cm-builtin\">len</span>(<span class=\"cm-variable\">msg</span>) ) <span class=\"cm-operator\">*</span> <span class=\"cm-string\">\"\\00\"</span> )\n\n    <span class=\"cm-comment\">## Payload length is a uint32_t</span>\n    <span class=\"cm-variable\">payload_raw</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">payload</span>.<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"hex\"</span>)\n    <span class=\"cm-variable\">payload_len</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">struct</span>.<span class=\"cm-property\">pack</span>(<span class=\"cm-string\">\"I\"</span>, <span class=\"cm-builtin\">len</span>(<span class=\"cm-variable\">payload_raw</span>))\n\n    <span class=\"cm-comment\">## Checksum is first 4 bytes of SHA256(SHA256(&lt;payload&gt;))</span>\n    <span class=\"cm-variable\">checksum</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">sha256</span>(<span class=\"cm-variable\">sha256</span>(<span class=\"cm-variable\">payload_raw</span>).<span class=\"cm-property\">digest</span>()).<span class=\"cm-property\">digest</span>()[:<span class=\"cm-number\">4</span>]\n\n    <span class=\"cm-variable\">sys</span>.<span class=\"cm-property\">stdout</span>.<span class=\"cm-property\">write</span>(\n        <span class=\"cm-variable\">network_string</span>\n        <span class=\"cm-operator\">+</span> <span class=\"cm-variable\">command</span>\n        <span class=\"cm-operator\">+</span> <span class=\"cm-variable\">payload_len</span>\n        <span class=\"cm-operator\">+</span> <span class=\"cm-variable\">checksum</span>\n        <span class=\"cm-operator\">+</span> <span class=\"cm-variable\">payload_raw</span>\n    )\n    <span class=\"cm-variable\">sys</span>.<span class=\"cm-property\">stdout</span>.<span class=\"cm-property\">flush</span>()</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>To connect to the P2P &lt;&lt;glossary:network&gt;&gt;, the trivial Python function above was developed to compute message headers and send payloads decoded from hex.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Python</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(823)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-823\">## Create a version message\nsend(&quot;version&quot;,\n      &quot;71110100&quot; # ........................ Protocol Version: 70001\n    + &quot;0000000000000000&quot; # ................ Services: Headers Only (SPV)\n    + &quot;c6925e5400000000&quot; # ................ Time: 1415484102\n    + &quot;00000000000000000000000000000000&quot;\n    + &quot;0000ffff7f000001208d&quot; # ............ Receiver IP Address/Port\n    + &quot;00000000000000000000000000000000&quot;\n    + &quot;0000ffff7f000001208d&quot; # ............ Sender IP Address/Port\n    + &quot;0000000000000000&quot; # ................ Nonce (not used here)\n    + &quot;1b&quot; # .............................. Bytes in version string\n    + &quot;2f426974636f696e2e6f726720457861&quot;\n    + &quot;6d706c653a302e392e332f&quot; # .......... Version string\n    + &quot;93050500&quot; # ........................ Starting block height: 329107\n    + &quot;00&quot; # .............................. Relay transactions: false\n)</textarea>\n\t\t\t<pre id=\"code-823\"><code><span class='cm-s-neo'><span class=\"cm-comment\">## Create a version message</span>\n<span class=\"cm-variable\">send</span>(<span class=\"cm-string\">\"version\"</span>,\n      <span class=\"cm-string\">\"71110100\"</span> <span class=\"cm-comment\"># ........................ Protocol Version: 70001</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"0000000000000000\"</span> <span class=\"cm-comment\"># ................ Services: Headers Only (SPV)</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"c6925e5400000000\"</span> <span class=\"cm-comment\"># ................ Time: 1415484102</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"00000000000000000000000000000000\"</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"0000ffff7f000001208d\"</span> <span class=\"cm-comment\"># ............ Receiver IP Address&#47;Port</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"00000000000000000000000000000000\"</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"0000ffff7f000001208d\"</span> <span class=\"cm-comment\"># ............ Sender IP Address&#47;Port</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"0000000000000000\"</span> <span class=\"cm-comment\"># ................ Nonce (not used here)</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"1b\"</span> <span class=\"cm-comment\"># .............................. Bytes in version string</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"2f426974636f696e2e6f726720457861\"</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"6d706c653a302e392e332f\"</span> <span class=\"cm-comment\"># .......... Version string</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"93050500\"</span> <span class=\"cm-comment\"># ........................ Starting block height: 329107</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"00\"</span> <span class=\"cm-comment\"># .............................. Relay transactions: false</span>\n)</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Peers on the network will not accept any requests until you send them a <a href=\"core-ref-p2p-network-control-messages#section-version\"><code>version</code> message</a>. The receiving node will reply with their <a href=\"core-ref-p2p-network-control-messages#section-version\"><code>version</code> message</a> and a <a href=\"core-ref-p2p-network-control-messages#section-verack\"><code>verack</code> message</a>.</p>\n<pre><code class=\"lang-python\"><span class='cm-s-neo'><span class=\"cm-variable\">sleep</span>(<span class=\"cm-number\">1</span>)\n<span class=\"cm-variable\">send</span>(<span class=\"cm-string\">\"verack\"</span>, <span class=\"cm-string\">\"\"</span>)</span>\n</code></pre>\n<p>We&#39;re not going to validate their <a href=\"core-ref-p2p-network-control-messages#section-version\"><code>version</code> message</a> with this simple script, but we will sleep a short bit and send back our own <a href=\"core-ref-p2p-network-control-messages#section-verack\"><code>verack</code> message</a> as if we had accepted their <a href=\"core-ref-p2p-network-control-messages#section-version\"><code>version</code> message</a>.</p>\n<pre><code class=\"lang-python\"><span class='cm-s-neo'><span class=\"cm-variable\">send</span>(<span class=\"cm-string\">\"filterload\"</span>,\n      <span class=\"cm-string\">\"02\"</span>  <span class=\"cm-comment\"># ........ Filter bytes: 2</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"b50f\"</span> <span class=\"cm-comment\"># ....... Filter: 1010 1101 1111 0000</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"0b000000\"</span> <span class=\"cm-comment\"># ... nHashFuncs: 11</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"00000000\"</span> <span class=\"cm-comment\"># ... nTweak: 0&#47;none</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"00\"</span> <span class=\"cm-comment\"># ......... nFlags: BLOOM_UPDATE_NONE</span>\n)</span>\n</code></pre>\n<p>We set a &lt;&lt;glossary:bloom filter&gt;&gt; with the <a href=\"core-ref-p2p-network-control-messages#section-filterload\"><code>filterload</code> message</a>. This filter is described in the preceding sections.</p>\n<pre><code class=\"lang-python\"><span class='cm-s-neo'><span class=\"cm-variable\">send</span>(<span class=\"cm-string\">\"getdata\"</span>,\n      <span class=\"cm-string\">\"01\"</span> <span class=\"cm-comment\"># ................................. Number of inventories: 1</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"03000000\"</span> <span class=\"cm-comment\"># ........................... Inventory type: filtered block</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"a4deb66c0d726b0aefb03ed51be407fb\"</span>\n    <span class=\"cm-operator\">+</span> <span class=\"cm-string\">\"ad7331c6e8f9eef231b7000000000000\"</span> <span class=\"cm-comment\"># ... Block header hash</span>\n)</span>\n</code></pre>\n<p>We request a merkle block for transactions matching our filter, completing our script.</p>\n<p>To run the script, we simply pipe it to the Unix <a href=\"https://en.wikipedia.org/wiki/Netcat\"><code>netcat</code> command</a> or one of its many clones, one of which is available for practically any platform. For example, with the original netcat and using hexdump (<code>hd</code>) to display the output:</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'><span class=\"cm-comment\">## Connect to the Bitcoin Core peer running on localhost</span>\npython get-merkle.py | <span class=\"cm-builtin\">nc</span> localhost <span class=\"cm-number\">8333</span> | hd</span>\n</code></pre>\n<p>Part of the response is shown in the <a href=\"core-examples-p2p-network-parsing-a-merkleblock\">Parsing a MerkleBlock</a> section.</p>\n\n</div>"
}