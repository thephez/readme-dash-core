{
 "_id": "5db1ee712239b500188b6af1",
 "version": "5daf2e65f4109c0040fd51e5",
 "updatedAt": "2019-11-20T14:11:16.171Z",
 "createdAt": "2019-10-24T18:33:21.419Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "5db19f9975818c0034428efb",
 "category": "5db19f199332b800310886f8",
 "__v": 1,
 "updates": [],
 "next": {
  "pages": [
   {
    "category": "Core Examples",
    "slug": "core-examples-p2p-network-retrieving-a-merkleblock",
    "name": "Retrieving A MerkleBlock",
    "icon": "file-text-o",
    "type": "doc"
   }
  ],
  "description": ""
 },
 "link_external": false,
 "link_url": "",
 "sync_unique": "",
 "hidden": false,
 "api": {
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "auth": "required",
  "params": [],
  "url": "",
  "method": "get"
 },
 "isReference": false,
 "order": 2,
 "body": "Complete Python script demonstrating the [Creating](core-examples-p2p-network-creating-a-bloom-filter)/[Evaluating](core-examples-p2p-network-evaluating-a-bloom-filter) bloom filter examples (available [here](https://gist.github.com/dash-docs/5d63f095352a717f90d41a5e7fbbdac1#file-bloom_filter_example-py)):\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"#!/usr/bin/env python\\nfrom math import log\\nfrom bitarray import bitarray  # from pypi.python.org/pypi/bitarray\\nimport pyhash  # from https://github.com/flier/pyfasthash\\n\\n# Based on BIP-37\\n# https://github.com/QuantumExplorer/bips/blob/master/bip-0037.mediawiki\\n\\n# Defined in bloom.h\\n# https://github.com/dashpay/dash/blob/master/src/bloom.h#L19-#L20\\nMAX_BLOOM_FILTER_SIZE = 36000\\nMAX_HASH_FUNCS = 50\\n\\n# Set of flags that control how matched items are added to the filter (per BIP-37)\\n# https://github.com/dashpay/dash/blob/master/src/bloom.h#L26\\nnFlags = 0\\n\\nnElements = 1 # Number of elements\\nnFPRate = 0.0001 # False positive rate\\n\\nnFilterBytes = int(min((-1 / log(2)**2 * nElements * log(nFPRate)) / 8, MAX_BLOOM_FILTER_SIZE))\\n\\n# Calculate the number of hash functions to use in the filter\\n# Limit the maximum number to 50 per BIP-37\\nnHashFuncs = int(min(nFilterBytes * 8 / nElements * log(2), MAX_HASH_FUNCS))\\n\\nmurmur3 = pyhash.murmur3_32()\\n\\nTEST_TXID = \\\"019f5b01d4195ecbc9398fbf3c3b1fa9bb3183301d7a1fb3bd174fcfa40a2b65\\\"\\n\\ndef bloom_hash(nHashNum, data):\\n    seed = (nHashNum * 0xfba4c795 + nTweak) & 0xffffffff\\n    return( murmur3(data, seed=seed) % (nFilterBytes * 8) )\\n\\n\\n# Bloom Filter creation\\ndef create_filter(nTweak):\\n    print('Creating bloom filter')\\n    vData = nFilterBytes * 8 * bitarray('0', endian=\\\"little\\\")\\n\\n    data_to_hash = TEST_TXID\\n    data_to_hash = data_to_hash.decode(\\\"hex\\\")\\n\\n    print('Filter bytes: {}; Hash functions: {}'.format(nFilterBytes, nHashFuncs))\\n\\n    print(\\\"                             Filter (As Bits)\\\")\\n    print(\\\"nHashNum   nIndex   Filter   0123456789abcdef\\\")\\n    print(\\\"~~~~~~~~   ~~~~~~   ~~~~~~   ~~~~~~~~~~~~~~~~\\\")\\n    for nHashNum in range(nHashFuncs):\\n        nIndex = bloom_hash(nHashNum, data_to_hash)\\n\\n        ## Set the bit at nIndex to 1\\n        vData[nIndex] = True\\n\\n        ## Debug: print current state\\n        print('      {0:2}      {1:2}     {2}   {3}'.format(\\n            nHashNum,\\n            hex(int(nIndex)),\\n            vData.tobytes().encode(\\\"hex\\\"),\\n            vData.to01()\\n        ))\\n\\n    print('Bloom filter: {}\\\\n'.format(vData.tobytes().encode(\\\"hex\\\")))\\n\\n\\n# Bloom Filter evaluation\\ndef evaluate_filter():\\n    print('Evaluating bloom filter')\\n    vData = bitarray(endian='little')\\n    vData.frombytes(\\\"b50f\\\".decode(\\\"hex\\\"))\\n    nHashFuncs = 11\\n    nTweak = 0\\n    nFlags = 0\\n\\n    def contains(nHashFuncs, data_to_hash):\\n        for nHashNum in range(nHashFuncs):\\n            ## bloom_hash as defined in previous section\\n            nIndex = bloom_hash(nHashNum, data_to_hash)\\n\\n            if vData[nIndex] != True:\\n                print(\\\"MATCH FAILURE: Index {0} not set in {1}\\\\n\\\".format(\\n                    hex(int(nIndex)),\\n                    vData.to01()\\n                ))\\n                return False\\n        print(\\\"MATCH SUCCESS\\\\n\\\")\\n\\n    ## Test 1: Same TXID as previously added to filter\\n    data_to_hash = TEST_TXID\\n    print('\\\\nChecking: {}'.format(data_to_hash))\\n    data_to_hash = data_to_hash.decode(\\\"hex\\\")\\n    contains(nHashFuncs, data_to_hash)\\n\\n    ## Test 2: Arbitrary string\\n    data_to_hash = \\\"1/10,000 chance this ASCII string will match\\\"\\n    print('Checking: {}'.format(data_to_hash))\\n    contains(nHashFuncs, data_to_hash)\\n\\n\\n# Tweak is a random value added to the seed value in the hash function\\n# used by the bloom filter\\nnTweak = 0\\n\\ncreate_filter(nTweak)\\nevaluate_filter()\",\n      \"language\": \"python\"\n    }\n  ]\n}\n[/block]",
 "excerpt": "",
 "slug": "core-examples-p2p-network-bloom-filter-script",
 "type": "basic",
 "metadata": {
  "description": "",
  "title": "",
  "image": []
 },
 "title": "Bloom Filter Script",
 "id": "5db1ee712239b500188b6af1",
 "isApi": false,
 "body_html": "<div class=\"magic-block-textarea\"><p>Complete Python script demonstrating the <a href=\"core-examples-p2p-network-creating-a-bloom-filter\">Creating</a>/<a href=\"core-examples-p2p-network-evaluating-a-bloom-filter\">Evaluating</a> bloom filter examples (available <a href=\"https://gist.github.com/dash-docs/5d63f095352a717f90d41a5e7fbbdac1#file-bloom_filter_example-py\">here</a>):</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Python</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(428)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-428\">#!/usr/bin/env python\nfrom math import log\nfrom bitarray import bitarray  # from pypi.python.org/pypi/bitarray\nimport pyhash  # from https://github.com/flier/pyfasthash\n\n# Based on BIP-37\n# https://github.com/QuantumExplorer/bips/blob/master/bip-0037.mediawiki\n\n# Defined in bloom.h\n# https://github.com/dashpay/dash/blob/master/src/bloom.h#L19-#L20\nMAX_BLOOM_FILTER_SIZE = 36000\nMAX_HASH_FUNCS = 50\n\n# Set of flags that control how matched items are added to the filter (per BIP-37)\n# https://github.com/dashpay/dash/blob/master/src/bloom.h#L26\nnFlags = 0\n\nnElements = 1 # Number of elements\nnFPRate = 0.0001 # False positive rate\n\nnFilterBytes = int(min((-1 / log(2)**2 * nElements * log(nFPRate)) / 8, MAX_BLOOM_FILTER_SIZE))\n\n# Calculate the number of hash functions to use in the filter\n# Limit the maximum number to 50 per BIP-37\nnHashFuncs = int(min(nFilterBytes * 8 / nElements * log(2), MAX_HASH_FUNCS))\n\nmurmur3 = pyhash.murmur3_32()\n\nTEST_TXID = &quot;019f5b01d4195ecbc9398fbf3c3b1fa9bb3183301d7a1fb3bd174fcfa40a2b65&quot;\n\ndef bloom_hash(nHashNum, data):\n    seed = (nHashNum * 0xfba4c795 + nTweak) &amp; 0xffffffff\n    return( murmur3(data, seed=seed) % (nFilterBytes * 8) )\n\n\n# Bloom Filter creation\ndef create_filter(nTweak):\n    print('Creating bloom filter')\n    vData = nFilterBytes * 8 * bitarray('0', endian=&quot;little&quot;)\n\n    data_to_hash = TEST_TXID\n    data_to_hash = data_to_hash.decode(&quot;hex&quot;)\n\n    print('Filter bytes: {}; Hash functions: {}'.format(nFilterBytes, nHashFuncs))\n\n    print(&quot;                             Filter (As Bits)&quot;)\n    print(&quot;nHashNum   nIndex   Filter   0123456789abcdef&quot;)\n    print(&quot;~~~~~~~~   ~~~~~~   ~~~~~~   ~~~~~~~~~~~~~~~~&quot;)\n    for nHashNum in range(nHashFuncs):\n        nIndex = bloom_hash(nHashNum, data_to_hash)\n\n        ## Set the bit at nIndex to 1\n        vData[nIndex] = True\n\n        ## Debug: print current state\n        print('      {0:2}      {1:2}     {2}   {3}'.format(\n            nHashNum,\n            hex(int(nIndex)),\n            vData.tobytes().encode(&quot;hex&quot;),\n            vData.to01()\n        ))\n\n    print('Bloom filter: {}\\n'.format(vData.tobytes().encode(&quot;hex&quot;)))\n\n\n# Bloom Filter evaluation\ndef evaluate_filter():\n    print('Evaluating bloom filter')\n    vData = bitarray(endian='little')\n    vData.frombytes(&quot;b50f&quot;.decode(&quot;hex&quot;))\n    nHashFuncs = 11\n    nTweak = 0\n    nFlags = 0\n\n    def contains(nHashFuncs, data_to_hash):\n        for nHashNum in range(nHashFuncs):\n            ## bloom_hash as defined in previous section\n            nIndex = bloom_hash(nHashNum, data_to_hash)\n\n            if vData[nIndex] != True:\n                print(&quot;MATCH FAILURE: Index {0} not set in {1}\\n&quot;.format(\n                    hex(int(nIndex)),\n                    vData.to01()\n                ))\n                return False\n        print(&quot;MATCH SUCCESS\\n&quot;)\n\n    ## Test 1: Same TXID as previously added to filter\n    data_to_hash = TEST_TXID\n    print('\\nChecking: {}'.format(data_to_hash))\n    data_to_hash = data_to_hash.decode(&quot;hex&quot;)\n    contains(nHashFuncs, data_to_hash)\n\n    ## Test 2: Arbitrary string\n    data_to_hash = &quot;1/10,000 chance this ASCII string will match&quot;\n    print('Checking: {}'.format(data_to_hash))\n    contains(nHashFuncs, data_to_hash)\n\n\n# Tweak is a random value added to the seed value in the hash function\n# used by the bloom filter\nnTweak = 0\n\ncreate_filter(nTweak)\nevaluate_filter()</textarea>\n\t\t\t<pre id=\"code-428\"><code><span class='cm-s-neo'><span class=\"cm-comment\">#!&#47;usr&#47;bin&#47;env python</span>\n<span class=\"cm-keyword\">from</span> <span class=\"cm-variable\">math</span> <span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">log</span>\n<span class=\"cm-keyword\">from</span> <span class=\"cm-variable\">bitarray</span> <span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">bitarray</span>  <span class=\"cm-comment\"># from pypi.python.org&#47;pypi&#47;bitarray</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">pyhash</span>  <span class=\"cm-comment\"># from https:&#47;&#47;github.com&#47;flier&#47;pyfasthash</span>\n\n<span class=\"cm-comment\"># Based on BIP-37</span>\n<span class=\"cm-comment\"># https:&#47;&#47;github.com&#47;QuantumExplorer&#47;bips&#47;blob&#47;master&#47;bip-0037.mediawiki</span>\n\n<span class=\"cm-comment\"># Defined in bloom.h</span>\n<span class=\"cm-comment\"># https:&#47;&#47;github.com&#47;dashpay&#47;dash&#47;blob&#47;master&#47;src&#47;bloom.h#L19-#L20</span>\n<span class=\"cm-variable\">MAX_BLOOM_FILTER_SIZE</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">36000</span>\n<span class=\"cm-variable\">MAX_HASH_FUNCS</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">50</span>\n\n<span class=\"cm-comment\"># Set of flags that control how matched items are added to the filter (per BIP-37)</span>\n<span class=\"cm-comment\"># https:&#47;&#47;github.com&#47;dashpay&#47;dash&#47;blob&#47;master&#47;src&#47;bloom.h#L26</span>\n<span class=\"cm-variable\">nFlags</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">0</span>\n\n<span class=\"cm-variable\">nElements</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">1</span> <span class=\"cm-comment\"># Number of elements</span>\n<span class=\"cm-variable\">nFPRate</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">0.0001</span> <span class=\"cm-comment\"># False positive rate</span>\n\n<span class=\"cm-variable\">nFilterBytes</span> <span class=\"cm-operator\">=</span> <span class=\"cm-builtin\">int</span>(<span class=\"cm-builtin\">min</span>((<span class=\"cm-operator\">-</span><span class=\"cm-number\">1</span> <span class=\"cm-operator\">&#47;</span> <span class=\"cm-variable\">log</span>(<span class=\"cm-number\">2</span>)<span class=\"cm-operator\">**</span><span class=\"cm-number\">2</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">nElements</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">log</span>(<span class=\"cm-variable\">nFPRate</span>)) <span class=\"cm-operator\">&#47;</span> <span class=\"cm-number\">8</span>, <span class=\"cm-variable\">MAX_BLOOM_FILTER_SIZE</span>))\n\n<span class=\"cm-comment\"># Calculate the number of hash functions to use in the filter</span>\n<span class=\"cm-comment\"># Limit the maximum number to 50 per BIP-37</span>\n<span class=\"cm-variable\">nHashFuncs</span> <span class=\"cm-operator\">=</span> <span class=\"cm-builtin\">int</span>(<span class=\"cm-builtin\">min</span>(<span class=\"cm-variable\">nFilterBytes</span> <span class=\"cm-operator\">*</span> <span class=\"cm-number\">8</span> <span class=\"cm-operator\">&#47;</span> <span class=\"cm-variable\">nElements</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">log</span>(<span class=\"cm-number\">2</span>), <span class=\"cm-variable\">MAX_HASH_FUNCS</span>))\n\n<span class=\"cm-variable\">murmur3</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">pyhash</span>.<span class=\"cm-property\">murmur3_32</span>()\n\n<span class=\"cm-variable\">TEST_TXID</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"019f5b01d4195ecbc9398fbf3c3b1fa9bb3183301d7a1fb3bd174fcfa40a2b65\"</span>\n\n<span class=\"cm-keyword\">def</span> <span class=\"cm-def\">bloom_hash</span>(<span class=\"cm-variable\">nHashNum</span>, <span class=\"cm-variable\">data</span>):\n    <span class=\"cm-variable\">seed</span> <span class=\"cm-operator\">=</span> (<span class=\"cm-variable\">nHashNum</span> <span class=\"cm-operator\">*</span> <span class=\"cm-number\">0xfba4c795</span> <span class=\"cm-operator\">+</span> <span class=\"cm-variable\">nTweak</span>) <span class=\"cm-operator\">&amp;</span> <span class=\"cm-number\">0xffffffff</span>\n    <span class=\"cm-keyword\">return</span>( <span class=\"cm-variable\">murmur3</span>(<span class=\"cm-variable\">data</span>, <span class=\"cm-variable\">seed</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">seed</span>) <span class=\"cm-operator\">%</span> (<span class=\"cm-variable\">nFilterBytes</span> <span class=\"cm-operator\">*</span> <span class=\"cm-number\">8</span>) )\n\n\n<span class=\"cm-comment\"># Bloom Filter creation</span>\n<span class=\"cm-keyword\">def</span> <span class=\"cm-def\">create_filter</span>(<span class=\"cm-variable\">nTweak</span>):\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'Creating bloom filter'</span>)\n    <span class=\"cm-variable\">vData</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">nFilterBytes</span> <span class=\"cm-operator\">*</span> <span class=\"cm-number\">8</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">bitarray</span>(<span class=\"cm-string\">'0'</span>, <span class=\"cm-variable\">endian</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"little\"</span>)\n\n    <span class=\"cm-variable\">data_to_hash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">TEST_TXID</span>\n    <span class=\"cm-variable\">data_to_hash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">data_to_hash</span>.<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"hex\"</span>)\n\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'Filter bytes: {}; Hash functions: {}'</span>.<span class=\"cm-property\">format</span>(<span class=\"cm-variable\">nFilterBytes</span>, <span class=\"cm-variable\">nHashFuncs</span>))\n\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">\"                             Filter (As Bits)\"</span>)\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">\"nHashNum   nIndex   Filter   0123456789abcdef\"</span>)\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">\"~~~~~~~~   ~~~~~~   ~~~~~~   ~~~~~~~~~~~~~~~~\"</span>)\n    <span class=\"cm-keyword\">for</span> <span class=\"cm-variable\">nHashNum</span> <span class=\"cm-keyword\">in</span> <span class=\"cm-builtin\">range</span>(<span class=\"cm-variable\">nHashFuncs</span>):\n        <span class=\"cm-variable\">nIndex</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">bloom_hash</span>(<span class=\"cm-variable\">nHashNum</span>, <span class=\"cm-variable\">data_to_hash</span>)\n\n        <span class=\"cm-comment\">## Set the bit at nIndex to 1</span>\n        <span class=\"cm-variable\">vData</span>[<span class=\"cm-variable\">nIndex</span>] <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">True</span>\n\n        <span class=\"cm-comment\">## Debug: print current state</span>\n        <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'      {0:2}      {1:2}     {2}   {3}'</span>.<span class=\"cm-property\">format</span>(\n            <span class=\"cm-variable\">nHashNum</span>,\n            <span class=\"cm-builtin\">hex</span>(<span class=\"cm-builtin\">int</span>(<span class=\"cm-variable\">nIndex</span>)),\n            <span class=\"cm-variable\">vData</span>.<span class=\"cm-property\">tobytes</span>().<span class=\"cm-property\">encode</span>(<span class=\"cm-string\">\"hex\"</span>),\n            <span class=\"cm-variable\">vData</span>.<span class=\"cm-property\">to01</span>()\n        ))\n\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'Bloom filter: {}\\n'</span>.<span class=\"cm-property\">format</span>(<span class=\"cm-variable\">vData</span>.<span class=\"cm-property\">tobytes</span>().<span class=\"cm-property\">encode</span>(<span class=\"cm-string\">\"hex\"</span>)))\n\n\n<span class=\"cm-comment\"># Bloom Filter evaluation</span>\n<span class=\"cm-keyword\">def</span> <span class=\"cm-def\">evaluate_filter</span>():\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'Evaluating bloom filter'</span>)\n    <span class=\"cm-variable\">vData</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">bitarray</span>(<span class=\"cm-variable\">endian</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">'little'</span>)\n    <span class=\"cm-variable\">vData</span>.<span class=\"cm-property\">frombytes</span>(<span class=\"cm-string\">\"b50f\"</span>.<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"hex\"</span>))\n    <span class=\"cm-variable\">nHashFuncs</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">11</span>\n    <span class=\"cm-variable\">nTweak</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">0</span>\n    <span class=\"cm-variable\">nFlags</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">0</span>\n\n    <span class=\"cm-keyword\">def</span> <span class=\"cm-def\">contains</span>(<span class=\"cm-variable\">nHashFuncs</span>, <span class=\"cm-variable\">data_to_hash</span>):\n        <span class=\"cm-keyword\">for</span> <span class=\"cm-variable\">nHashNum</span> <span class=\"cm-keyword\">in</span> <span class=\"cm-builtin\">range</span>(<span class=\"cm-variable\">nHashFuncs</span>):\n            <span class=\"cm-comment\">## bloom_hash as defined in previous section</span>\n            <span class=\"cm-variable\">nIndex</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">bloom_hash</span>(<span class=\"cm-variable\">nHashNum</span>, <span class=\"cm-variable\">data_to_hash</span>)\n\n            <span class=\"cm-keyword\">if</span> <span class=\"cm-variable\">vData</span>[<span class=\"cm-variable\">nIndex</span>] <span class=\"cm-operator\">!=</span> <span class=\"cm-keyword\">True</span>:\n                <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">\"MATCH FAILURE: Index {0} not set in {1}\\n\"</span>.<span class=\"cm-property\">format</span>(\n                    <span class=\"cm-builtin\">hex</span>(<span class=\"cm-builtin\">int</span>(<span class=\"cm-variable\">nIndex</span>)),\n                    <span class=\"cm-variable\">vData</span>.<span class=\"cm-property\">to01</span>()\n                ))\n                <span class=\"cm-keyword\">return</span> <span class=\"cm-keyword\">False</span>\n        <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">\"MATCH SUCCESS\\n\"</span>)\n\n    <span class=\"cm-comment\">## Test 1: Same TXID as previously added to filter</span>\n    <span class=\"cm-variable\">data_to_hash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">TEST_TXID</span>\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'\\nChecking: {}'</span>.<span class=\"cm-property\">format</span>(<span class=\"cm-variable\">data_to_hash</span>))\n    <span class=\"cm-variable\">data_to_hash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">data_to_hash</span>.<span class=\"cm-property\">decode</span>(<span class=\"cm-string\">\"hex\"</span>)\n    <span class=\"cm-variable\">contains</span>(<span class=\"cm-variable\">nHashFuncs</span>, <span class=\"cm-variable\">data_to_hash</span>)\n\n    <span class=\"cm-comment\">## Test 2: Arbitrary string</span>\n    <span class=\"cm-variable\">data_to_hash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"1&#47;10,000 chance this ASCII string will match\"</span>\n    <span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'Checking: {}'</span>.<span class=\"cm-property\">format</span>(<span class=\"cm-variable\">data_to_hash</span>))\n    <span class=\"cm-variable\">contains</span>(<span class=\"cm-variable\">nHashFuncs</span>, <span class=\"cm-variable\">data_to_hash</span>)\n\n\n<span class=\"cm-comment\"># Tweak is a random value added to the seed value in the hash function</span>\n<span class=\"cm-comment\"># used by the bloom filter</span>\n<span class=\"cm-variable\">nTweak</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\">0</span>\n\n<span class=\"cm-variable\">create_filter</span>(<span class=\"cm-variable\">nTweak</span>)\n<span class=\"cm-variable\">evaluate_filter</span>()</span></code></pre></span>\n\t</div>\n</div>"
}