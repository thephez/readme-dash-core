{
 "parentDoc": "5db1c7f980dc4f02b5e4131a", 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }, 
  "auth": "required", 
  "method": "get"
 }, 
 "updatedAt": "2019-11-14T19:14:06.705Z", 
 "sync_unique": "", 
 "id": "5db1c90360f9c200498e0e81", 
 "createdAt": "2019-10-24T15:53:39.526Z", 
 "category": "5db19f199332b800310886f8", 
 "title": "Complex Raw Transaction", 
 "next": {
  "pages": [
   {
    "category": "Core Examples", 
    "icon": "file-text-o", 
    "type": "doc", 
    "slug": "core-examples-transaction-tutorial-offline-signing", 
    "name": "Offline Signing"
   }
  ], 
  "description": ""
 }, 
 "version": "5daf2e65f4109c0040fd51e5", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "In this example, we'll create a <<glossary:transaction>> with two <<glossary:inputs>> and two <<glossary:outputs>>.  We'll sign each of the inputs separately, as might happen if the two inputs belonged to different people who agreed to create a transaction together (such as a CoinJoin transaction).\n\n# 1. List unspent outputs\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"> dash-cli -regtest listunspent\",\n      \"language\": \"shell\",\n      \"name\": null\n    }\n  ]\n}\n[/block]\n``` json\n[\n  {\n    \"txid\": \"fa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d\",\n    \"vout\": 0,\n    \"address\": \"yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\",\n    \"account\": \"\",\n    \"scriptPubKey\": \"76a914d240140859744755d73e5967081c3bedceffc5db88ac\",\n    \"amount\": 499.99990000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 0,\n    \"address\": \"yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\",\n    \"account\": \"\",\n    \"scriptPubKey\": \"76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac\",\n    \"amount\": 10.00000000,\n    \"confirmations\": 2,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 1,\n    \"address\": \"yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ\",\n    \"scriptPubKey\": \"76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac\",\n    \"amount\": 490.00000000,\n    \"confirmations\": 2,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84\",\n    \"vout\": 0,\n    \"address\": \"yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\",\n    \"scriptPubKey\": \"21023fff9c9dc9088c0aeba90d75413705091111311d761054de23\\\n                      acdd217450869aac\",\n    \"amount\": 500.00000000,\n    \"confirmations\": 101,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  }\n]\n```\n\n# 2. Select UTXOs\n\nFor our two inputs, we select two UTXOs by placing the txid and output index numbers (vouts) in shell variables.  We also save the addresses corresponding to the public keys (hashed or unhashed) used in those transactions. We need the addresses so we can get the corresponding private keys from our wallet.\n\n``` bash\n> UTXO1_TXID=ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84\n> UTXO1_VOUT=0\n> UTXO1_ADDRESS=yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\n\n> UTXO2_TXID=f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\n> UTXO2_VOUT=0\n> UTXO2_ADDRESS=yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\n```\n\n# 3. Get private keys\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"**Warning:** Users should never manually manage private keys on mainnet. As dangerous as raw transactions are (see warnings above), making a mistake with a private key can be much worse---as in the case of a HD wallet [cross-generational key compromise](core-guide-wallets-wallet-files#section-hardened-keys). \\n**These examples are to help you learn, not for you to emulate on mainnet.**\",\n  \"title\": \"Private Key Warning\"\n}\n[/block]\nUse the [`dumpprivkey` RPC](core-api-ref-remote-procedure-calls-wallet#section-dumpprivkey) to get the <<glossary:private keys>> corresponding to the <<glossary:public keys>> used in the two UTXOs our inputs we will be spending.  We need the private keys so we can sign each of the inputs separately.\n\n``` bash\n> dash-cli -regtest dumpprivkey $UTXO1_ADDRESS\ncNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n> dash-cli -regtest dumpprivkey $UTXO2_ADDRESS\ncPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN\n\n> UTXO1_PRIVATE_KEY=cNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n> UTXO2_PRIVATE_KEY=cPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN\n```\n\n# 4. Get new addresses\n\nFor our two outputs, get two new <<glossary:addresses>>.\n\n``` bash\n> dash-cli -regtest getnewaddress\nyhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n> dash-cli -regtest getnewaddress\nyesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\n\n> NEW_ADDRESS1=yhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n> NEW_ADDRESS2=yesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\n```\n\n# 5. Create raw transaction\n\nCreate the <<glossary:raw transaction>> using the [`createrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#section-createrawtransaction) much the same as before, except now we have two inputs and two outputs.\n\n``` bash\n## Outputs - inputs = transaction fee, so always double-check your math!\n> dash-cli -regtest createrawtransaction '''\n    [\n      {\n        \"txid\": \"'$UTXO1_TXID'\",\n        \"vout\": '$UTXO1_VOUT'\n      },\n      {\n        \"txid\": \"'$UTXO2_TXID'\",\n        \"vout\": '$UTXO2_VOUT'\n      }\n    ]\n    ''' '''\n    {\n      \"'$NEW_ADDRESS1'\": 499.9999,\n      \"'$NEW_ADDRESS2'\": 10\n    }'''\n0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f84678135a\\\na56d596dea0000000000ffffffff30d100f7762956100a2396403c60e13e7a13\\\n520167acc6d38978ec33ada44cf80000000000ffffffff02f04c3ba40b000000\\\n1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b0000\\\n00001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac00000000\n\n> RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f[...]\n```\n\n# 6. Sign raw transaction\n\nSigning the raw transaction with `signrawtransaction` gets more complicated as we now have three arguments:\n\n1. The unsigned raw transaction.\n\n2. An empty array. We don't do anything with this argument in this operation, but some valid JSON must be provided to get access to the later positional arguments.\n\n3. The private key we want to use to sign one of the inputs.\n\n## 6a. First input\n\nThe result is a raw transaction with only one input signed; the fact that the transaction isn't fully signed is indicated by value of the `complete` JSON field.  We save the incomplete, partly-signed raw transaction hex to a shell variable.\n\n``` bash\n> dash-cli -regtest signrawtransaction $RAW_TX '[]' '''\n    [\n      \"'$UTXO1_PRIVATE_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\n  f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\\n  76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\\n  2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\\n  d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\\n  0000000000ffffffff02f04c3ba40b0000001976a914ec73fe6129b249617b\\\n  b5f20c8760708055fb6fdb88ac00ca9a3b000000001976a914cb7a56b04647\\\n  9f8c247875d672d3e1aed18c33f488ac00000000\",\n  \"complete\": false,\n  \"errors\": [\n    {\n      \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a1\\\n                0562976f700d130\",\n      \"vout\": 0,\n      \"scriptSig\": \"\",\n      \"sequence\": 4294967295,\n      \"error\": \"Operation not valid with the current stack size\"\n    }\n  ]\n}\n```\n``` bash\n\n> PARTLY_SIGNED_RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce6[...]\n```\n\n## 6b. Second input\n\nTo sign the second input, we repeat the process we used to sign the first input using the second private key. Now that both inputs are signed, the `complete` result is *true*.\n\n``` bash\n> dash-cli -regtest signrawtransaction $PARTLY_SIGNED_RAW_TX '[]' '''\n    [\n      \"'$UTXO2_PRIVATE_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\n  f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\\n  76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\\n  2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\\n  d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\\n  000000006a47304402207867e88e3fe2c926df29376d77eba81daf9f4a5573\\\n  44d4f02e9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca\\\n  3757342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b7f\\\n  40f321db1c13cd70cf08bdab3e23c8d19620ffffffff02f04c3ba40b000000\\\n  1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b00\\\n  0000001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac0000\\\n  0000\",\n  \"complete\": true\n}\n```\n\nClean up the shell variables used. Unlike previous subsections, we're not going to send this transaction to the connected node with `sendrawtransaction`. This will allow us to illustrate in the [Offline Signing subsection](core-examples-transaction-tutorial-offline-signing) below how to spend a transaction which is not yet in the block chain or memory pool.\n\n``` bash\n> unset PARTLY_SIGNED_RAW_TX RAW_TX NEW_ADDRESS1 [...]\n```", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>In this example, we&#39;ll create a &lt;&lt;glossary:transaction&gt;&gt; with two &lt;&lt;glossary:inputs&gt;&gt; and two &lt;&lt;glossary:outputs&gt;&gt;.  We&#39;ll sign each of the inputs separately, as might happen if the two inputs belonged to different people who agreed to create a transaction together (such as a CoinJoin transaction).</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-1-list-unspent-outputs\"></div>1. List unspent outputs<a class=\"fa fa-anchor\" href=\"#section-1-list-unspent-outputs\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(488)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-488\">&gt; dash-cli -regtest listunspent</textarea>\n\t\t\t<pre id=\"code-488\"><code><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> listunspent</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><pre><code class=\"lang-json\"><span class='cm-s-neo'>[\n  {\n    <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"fa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d\"</span>,\n    <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n    <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\"</span>,\n    <span class=\"cm-property\">\"account\"</span>: <span class=\"cm-string\">\"\"</span>,\n    <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"76a914d240140859744755d73e5967081c3bedceffc5db88ac\"</span>,\n    <span class=\"cm-property\">\"amount\"</span>: <span class=\"cm-number\">499.99990000</span>,\n    <span class=\"cm-property\">\"confirmations\"</span>: <span class=\"cm-number\">1</span>,\n    <span class=\"cm-property\">\"ps_rounds\"</span>: <span class=\"cm-operator\">-</span><span class=\"cm-number\">2</span>,\n    <span class=\"cm-property\">\"spendable\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-property\">\"solvable\"</span>: <span class=\"cm-atom\">true</span>\n  },\n  {\n    <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\"</span>,\n    <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n    <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\"</span>,\n    <span class=\"cm-property\">\"account\"</span>: <span class=\"cm-string\">\"\"</span>,\n    <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac\"</span>,\n    <span class=\"cm-property\">\"amount\"</span>: <span class=\"cm-number\">10.00000000</span>,\n    <span class=\"cm-property\">\"confirmations\"</span>: <span class=\"cm-number\">2</span>,\n    <span class=\"cm-property\">\"ps_rounds\"</span>: <span class=\"cm-operator\">-</span><span class=\"cm-number\">2</span>,\n    <span class=\"cm-property\">\"spendable\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-property\">\"solvable\"</span>: <span class=\"cm-atom\">true</span>\n  },\n  {\n    <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\"</span>,\n    <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">1</span>,\n    <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ\"</span>,\n    <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac\"</span>,\n    <span class=\"cm-property\">\"amount\"</span>: <span class=\"cm-number\">490.00000000</span>,\n    <span class=\"cm-property\">\"confirmations\"</span>: <span class=\"cm-number\">2</span>,\n    <span class=\"cm-property\">\"ps_rounds\"</span>: <span class=\"cm-operator\">-</span><span class=\"cm-number\">2</span>,\n    <span class=\"cm-property\">\"spendable\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-property\">\"solvable\"</span>: <span class=\"cm-atom\">true</span>\n  },\n  {\n    <span class=\"cm-property\">\"txid\"</span>: <span class=\"cm-string\">\"ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84\"</span>,\n    <span class=\"cm-property\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n    <span class=\"cm-property\">\"address\"</span>: <span class=\"cm-string\">\"yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\"</span>,\n    <span class=\"cm-property\">\"scriptPubKey\"</span>: <span class=\"cm-string\">\"21023fff9c9dc9088c0aeba90d75413705091111311d761054de23\\</span>\n                      <span class=\"cm-string\">acdd217450869aac\"</span>,\n    <span class=\"cm-string\">\"amount\"</span>: <span class=\"cm-number\">500.00000000</span>,\n    <span class=\"cm-string\">\"confirmations\"</span>: <span class=\"cm-number\">101</span>,\n    <span class=\"cm-string\">\"ps_rounds\"</span>: <span class=\"cm-operator\">-</span><span class=\"cm-number\">2</span>,\n    <span class=\"cm-string\">\"spendable\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-string\">\"solvable\"</span>: <span class=\"cm-atom\">true</span>\n  }\n]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-2-select-utx-os\"></div>2. Select UTXOs<a class=\"fa fa-anchor\" href=\"#section-2-select-utx-os\"></a></h1>\n<p>For our two inputs, we select two UTXOs by placing the txid and output index numbers (vouts) in shell variables.  We also save the addresses corresponding to the public keys (hashed or unhashed) used in those transactions. We need the addresses so we can get the corresponding private keys from our wallet.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; <span class=\"cm-def\">UTXO1_TXID</span><span class=\"cm-operator\">=</span>ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84\n&gt; <span class=\"cm-def\">UTXO1_VOUT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">0</span>\n&gt; <span class=\"cm-def\">UTXO1_ADDRESS</span><span class=\"cm-operator\">=</span>yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\n\n&gt; <span class=\"cm-def\">UTXO2_TXID</span><span class=\"cm-operator\">=</span>f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\n&gt; <span class=\"cm-def\">UTXO2_VOUT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">0</span>\n&gt; <span class=\"cm-def\">UTXO2_ADDRESS</span><span class=\"cm-operator\">=</span>yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-3-get-private-keys\"></div>3. Get private keys<a class=\"fa fa-anchor\" href=\"#section-3-get-private-keys\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Private Key Warning\n\t</h3>\n\t<div class=\"callout-body\"><p><strong>Warning:</strong> Users should never manually manage private keys on mainnet. As dangerous as raw transactions are (see warnings above), making a mistake with a private key can be much worse---as in the case of a HD wallet <a href=\"core-guide-wallets-wallet-files#section-hardened-keys\">cross-generational key compromise</a>.<br><strong>These examples are to help you learn, not for you to emulate on mainnet.</strong></p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Use the <a href=\"core-api-ref-remote-procedure-calls-wallet#section-dumpprivkey\"><code>dumpprivkey</code> RPC</a> to get the &lt;&lt;glossary:private keys&gt;&gt; corresponding to the &lt;&lt;glossary:public keys&gt;&gt; used in the two UTXOs our inputs we will be spending.  We need the private keys so we can sign each of the inputs separately.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> dumpprivkey <span class=\"cm-def\">$UTXO1_ADDRESS</span>\ncNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> dumpprivkey <span class=\"cm-def\">$UTXO2_ADDRESS</span>\ncPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN\n\n&gt; <span class=\"cm-def\">UTXO1_PRIVATE_KEY</span><span class=\"cm-operator\">=</span>cNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n&gt; <span class=\"cm-def\">UTXO2_PRIVATE_KEY</span><span class=\"cm-operator\">=</span>cPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-4-get-new-addresses\"></div>4. Get new addresses<a class=\"fa fa-anchor\" href=\"#section-4-get-new-addresses\"></a></h1>\n<p>For our two outputs, get two new &lt;&lt;glossary:addresses&gt;&gt;.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> getnewaddress\nyhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> getnewaddress\nyesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\n\n&gt; <span class=\"cm-def\">NEW_ADDRESS1</span><span class=\"cm-operator\">=</span>yhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n&gt; <span class=\"cm-def\">NEW_ADDRESS2</span><span class=\"cm-operator\">=</span>yesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-5-create-raw-transaction\"></div>5. Create raw transaction<a class=\"fa fa-anchor\" href=\"#section-5-create-raw-transaction\"></a></h1>\n<p>Create the &lt;&lt;glossary:raw transaction&gt;&gt; using the <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#section-createrawtransaction\"><code>createrawtransaction</code> RPC</a> much the same as before, except now we have two inputs and two outputs.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'><span class=\"cm-comment\">## Outputs - inputs = transaction fee, so always double-check your math!</span>\n&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> createrawtransaction <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      {</span>\n<span class=\"cm-string\">        \"txid\": \"'</span><span class=\"cm-def\">$UTXO1_TXID</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">        \"vout\": '</span><span class=\"cm-def\">$UTXO1_VOUT</span><span class=\"cm-string\">'</span>\n<span class=\"cm-string\">      },</span>\n<span class=\"cm-string\">      {</span>\n<span class=\"cm-string\">        \"txid\": \"'</span><span class=\"cm-def\">$UTXO2_TXID</span><span class=\"cm-string\">'\",</span>\n<span class=\"cm-string\">        \"vout\": '</span><span class=\"cm-def\">$UTXO2_VOUT</span><span class=\"cm-string\">'</span>\n<span class=\"cm-string\">      }</span>\n<span class=\"cm-string\">    ]</span>\n<span class=\"cm-string\">    '''</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    {</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS1</span><span class=\"cm-string\">'\": 499.9999,</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$NEW_ADDRESS2</span><span class=\"cm-string\">'\": 10</span>\n<span class=\"cm-string\">    }'''</span>\n0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f84678135a\\\na56d596dea0000000000ffffffff30d100f7762956100a2396403c60e13e7a13\\\n520167acc6d38978ec33ada44cf80000000000ffffffff02f04c3ba40b000000\\\n1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b0000\\\n00001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac00000000\n\n&gt; <span class=\"cm-def\">RAW_TX</span><span class=\"cm-operator\">=</span>0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f[...]</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-6-sign-raw-transaction\"></div>6. Sign raw transaction<a class=\"fa fa-anchor\" href=\"#section-6-sign-raw-transaction\"></a></h1>\n<p>Signing the raw transaction with <code>signrawtransaction</code> gets more complicated as we now have three arguments:</p>\n<ol>\n<li  value=\"1\"><p>The unsigned raw transaction.</p>\n</li><li  value=\"2\"><p>An empty array. We don&#39;t do anything with this argument in this operation, but some valid JSON must be provided to get access to the later positional arguments.</p>\n</li><li  value=\"3\"><p>The private key we want to use to sign one of the inputs.</p>\n</li></ol>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-6-a-first-input\"></div>6a. First input<a class=\"fa fa-anchor\" href=\"#section-6-a-first-input\"></a></h2>\n<p>The result is a raw transaction with only one input signed; the fact that the transaction isn&#39;t fully signed is indicated by value of the <code>complete</code> JSON field.  We save the incomplete, partly-signed raw transaction hex to a shell variable.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> signrawtransaction <span class=\"cm-def\">$RAW_TX</span> <span class=\"cm-string\">'[]'</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$UTXO1_PRIVATE_KEY</span><span class=\"cm-string\">'\"</span>\n<span class=\"cm-string\">    ]'''</span></span>\n</code></pre>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\</span>\n  <span class=\"cm-string\">f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\</span>\n  <span class=\"cm-string\">76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\</span>\n  <span class=\"cm-string\">2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\</span>\n  <span class=\"cm-string\">d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\</span>\n  <span class=\"cm-string\">0000000000ffffffff02f04c3ba40b0000001976a914ec73fe6129b249617b\\</span>\n  <span class=\"cm-string\">b5f20c8760708055fb6fdb88ac00ca9a3b000000001976a914cb7a56b04647\\</span>\n  <span class=\"cm-string\">9f8c247875d672d3e1aed18c33f488ac00000000\"</span>,\n  <span class=\"cm-string\">\"complete\"</span>: <span class=\"cm-atom\">false</span>,\n  <span class=\"cm-string\">\"errors\"</span>: [\n    {\n      <span class=\"cm-string\">\"txid\"</span>: <span class=\"cm-string\">\"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a1\\</span>\n                <span class=\"cm-string\">0562976f700d130\"</span>,\n      <span class=\"cm-string\">\"vout\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-string\">\"scriptSig\"</span>: <span class=\"cm-string\">\"\"</span>,\n      <span class=\"cm-string\">\"sequence\"</span>: <span class=\"cm-number\">4294967295</span>,\n      <span class=\"cm-string\">\"error\"</span>: <span class=\"cm-string\">\"Operation not valid with the current stack size\"</span>\n    }\n  ]\n}</span>\n</code></pre>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>\n&gt; <span class=\"cm-def\">PARTLY_SIGNED_RAW_TX</span><span class=\"cm-operator\">=</span>0100000002843d61e81058f0e682313b9e6f45ce6[...]</span>\n</code></pre>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-6-b-second-input\"></div>6b. Second input<a class=\"fa fa-anchor\" href=\"#section-6-b-second-input\"></a></h2>\n<p>To sign the second input, we repeat the process we used to sign the first input using the second private key. Now that both inputs are signed, the <code>complete</code> result is <em>true</em>.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; dash-cli <span class=\"cm-attribute\">-regtest</span> signrawtransaction <span class=\"cm-def\">$PARTLY_SIGNED_RAW_TX</span> <span class=\"cm-string\">'[]'</span> <span class=\"cm-string\">'''</span>\n<span class=\"cm-string\">    [</span>\n<span class=\"cm-string\">      \"'</span><span class=\"cm-def\">$UTXO2_PRIVATE_KEY</span><span class=\"cm-string\">'\"</span>\n<span class=\"cm-string\">    ]'''</span></span>\n</code></pre>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"hex\"</span>: <span class=\"cm-string\">\"0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\</span>\n  <span class=\"cm-string\">f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\</span>\n  <span class=\"cm-string\">76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\</span>\n  <span class=\"cm-string\">2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\</span>\n  <span class=\"cm-string\">d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\</span>\n  <span class=\"cm-string\">000000006a47304402207867e88e3fe2c926df29376d77eba81daf9f4a5573\\</span>\n  <span class=\"cm-string\">44d4f02e9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca\\</span>\n  <span class=\"cm-string\">3757342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b7f\\</span>\n  <span class=\"cm-string\">40f321db1c13cd70cf08bdab3e23c8d19620ffffffff02f04c3ba40b000000\\</span>\n  <span class=\"cm-string\">1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b00\\</span>\n  <span class=\"cm-string\">0000001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac0000\\</span>\n  <span class=\"cm-string\">0000\"</span>,\n  <span class=\"cm-string\">\"complete\"</span>: <span class=\"cm-atom\">true</span>\n}</span>\n</code></pre>\n<p>Clean up the shell variables used. Unlike previous subsections, we&#39;re not going to send this transaction to the connected node with <code>sendrawtransaction</code>. This will allow us to illustrate in the <a href=\"core-examples-transaction-tutorial-offline-signing\">Offline Signing subsection</a> below how to spend a transaction which is not yet in the block chain or memory pool.</p>\n<pre><code class=\"lang-bash\"><span class='cm-s-neo'>&gt; <span class=\"cm-keyword\">unset</span> PARTLY_SIGNED_RAW_TX RAW_TX NEW_ADDRESS1 [...]</span>\n</code></pre>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "core-examples-transaction-tutorial-complex-raw-transaction", 
 "link_url": "", 
 "isApi": false, 
 "project": "5daf2e65f4109c0040fd51e1", 
 "__v": 1, 
 "_id": "5db1c90360f9c200498e0e81", 
 "order": 2, 
 "updates": []
}